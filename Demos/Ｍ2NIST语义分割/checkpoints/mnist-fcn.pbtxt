node {
  name: "input_image_big"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
        dim {
          size: 84
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "input_image"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 784
        }
      }
    }
  }
}
node {
  name: "reshaped_image/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\034\000\000\000\034\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "reshaped_image"
  op: "Reshape"
  input: "input_image"
  input: "reshaped_image/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\365\262h>yj\216\275\312\315\351\275,\\\\\276\345\355\202\276h~<<\222\367@\275\302\355\216\276v\251\234>\033\326\233\2769uf\276\376D,\276\241$\022>\317\250\203>\034\227Q\276N\003w\276\302$g>\307\017c\276\3632t=\372\361\241==^m>z6\233>\005\201^\276Y]\032=\r\030z>\'$S\276\324\255\262=\020\225.\275\250\277\213>\344\222\233=x\232\221\276\315\302\247>\263\365\013>\005-\326\274\021\003\273>r\350\032>t\276\204\276\236p1\276\356\245~\276\013\250d>\210\367\036>c\217\347=x\r\301=\316\200\272\275XgA\276\270\250 \276\010\272\221>\317;\r\276)R\326=ta\206\276O\010\326>QN\201\276\325\034\267\275\366+3\276\265\226\301\275\237\030\273>6\234\320=\222\260\003\276\212\256{>)\252:\276\362\326\206>79\374=#8D\276\221\355\213>\327^\033>\312g\216\276\3554U>8\330H\276\261\227\306>\315a\261>\324\313\262\2767\370\'>\306\211T>`\277\232\275\324\326\206>\353\3339>\026rQ\275\364\001\363=:Y\206\276\241-\223\276\371U\213\2761\244\356>\377\362Z>\227\364\006\276\251z|\276\234\005\356\274\001\222\177=\371-2>\374N\335\276\004\302\367>\305\313\264>>\200\\\276N\274\223\276e_\363\275\212/\237<\277\345\345>\212\232R\276\356f\322=\305\n\005>\201\244\016\276\224\365\216>\245\330|=\376\333\260=\013fw>\305\310\037=3\343\213=\026\2021>s\213\216=\313\300\247>\312\230?>*R/>[\336\020\276+\211e>\272\325\217\276\210N\225=\331\236\n>\201\377U=\0253Q<\325\275q\276\236\363`\276k\177C\276\333\332\263>\"J\031\276m\230\027=\345\267\273\275[\223\r\276\321\270\343\274\352\310\243>\2633L\276\021u>>M\305\317\276\317\264\364\275lv\226\275\376\t\230\276\001m\236>\302\370\270=\001J`\276\374\032\231>\270\0005\276z|\346\275\322J\232>\232:\312=\037\306=>\220\025\314\276\225\371/\276\203\362\001>\2345\250\276\366\306h=`\314\024>\356\376\222>K\025$>)=\276\276\350SG=\"\003;=\000\266\001=\210\025\r=\201g/\276A\352A>\000\376\033<\247wr\276\331$\253\275\311\264u\276\361\270\237\276>m\217\275\233\247\277=\257\312\222\276\230i\024>\204\206=={\201\334<v\017\352\275\202\323\355\2759\255\221<\307[c>6g\327\276\370\301\216>&6o\276zR \276\234\373\276=\013@\222\276B\001\334=x\305\234>\207\310\005\276\246&6>\2258d\2765\005_\276\203K\206>\037>\221\275\240\365\t>`v\254<\305\251?>\266\"S>\220\214\001\275\004\010\250\275r\\]>\360\336V\276N8\022>\022r;\275\362\376\200>]N\243>\270jO>"
      }
    }
  }
}
node {
  name: "conv1/kernel/read"
  op: "Identity"
  input: "conv1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/kernel"
      }
    }
  }
}
node {
  name: "conv1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\263\201#>\210\001\364=\315\311\017>\356.\217<\342\020V=7yb=\rvU>E,\306="
      }
    }
  }
}
node {
  name: "conv1/bias/read"
  op: "Identity"
  input: "conv1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/bias"
      }
    }
  }
}
node {
  name: "conv1/Conv2D"
  op: "Conv2D"
  input: "input_image_big"
  input: "conv1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BiasAdd"
  op: "BiasAdd"
  input: "conv1/Conv2D"
  input: "conv1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv1/Relu"
  op: "Relu"
  input: "conv1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool1/MaxPool"
  op: "MaxPool"
  input: "conv1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        tensor_content: "\210\200,\276#\n\224>\022\377F\275\027\250\234>\257\315\353\273\"s\310>\377h\224=\364J\217>\220\243\235>\033\n\300=\257\310 \275\223=\007\2763\344j\275\371\230\346=\372\005\r;\300[d>6\240\310\276\r\023\225=\340\243\213\276\033*?>\313\362\254\274\342G\235>V\237\247\273\263\3654>\024\346\222\275\024\013j\275\022\2237\275\304jC\276J\316\r>\314K@\2764b\227>\001\270\303\275\375\225F\276*@\266\274(\355\020\276\203\017\213<\351\367l=\327o>=F\212r>\233N\252\274\362\236s>\215\212\305\275\000\001\021\277\t\351\220>\365Q\206>|^\">\327\364}\276\010\230\242>|e\246>mi\316\275\310%!>\320N\213=\273\267\241\274\302})>\002\234\000=j7-\276 3\376<_`Y>\025q\205\275Jm\264\275P\202\304\273nxF\275\037\303\360\2763\2332\276/\272\264\274(\251a>\345\365<>rN\310\275J\377\365\275\021\323\374<,\365\223\275\313n\300\276\230[\376>ukm=\010\365\351\274\372\213Y>\362\336 \275E@\204>\303\226\272=\375\002\310=8\\\001\276\241M\353=\316\353\335>\302\311\215\276u\252J\276zO\270=\237\020\210\275h\311\016\276\370\2756\275\337\230\025>\267p\n\275\006WH;c+\271:Wh\000=\230\036*>`\351Y;\326\354\345\275a$\277\274\340\374\272\276\207\322\302=\025Y\364=8\003[\276\201E\023>GR9>\032\373\255<\033z\\>\200Q\344\274\231\031R>z\220E>N\230\013>\217gg=+\336\327>\376>\273>\244\n\344=\034\335\356=\373\034\030\276b\367\350=s\210\234=\234\347\265=C\000q\2767\005\207\276S\242Y=R54\276\327\021O\276y\026\005>\326U\203>5\265\364\276\023\"\304\275b\270H\275\204\n\037>\273\352*\276bl8\276\321q\244\276,\357\032\274\234<:>\310\371!\276\346\316\220>Q\301\031\275\000\251\344=\2504\222\275l\2373>\332\272P\276\n\254/\276\242\233\025\276I\212\3119\344\251\201>\224w=>\212Ze\276mV\213\276\233_\312>\037\234Z<\020\270\260\276\262\202\376=\250\367\222=>\272*>\334\324P\275u\020/>J\006\302\276\327d\231\2751\370`\275Q\007\274=\002\212\206>\323\231\256\276U Q=\032\360d>\356O\017\275\036\347\271>\271C\224\275R\305{\275y~*>I\277J\276\014\200\227>\303\036R>\354e\036\2765\014\351<D\354\037>\203\223\210>?u\r\277\351\224V>;O\310<\036Kv=\013_&\275\373\362\250\276\305\001\003\276\346d\262\276\371\351\205\275\232\016\r>\326\3339\275\016\273\r>+\027X>\003\020P\276\230\305F>J\227w=\330@\224=\2334\331=m]\036=\347p\'\276aX\315=\246\200N\275\306\261\032>\323B\3569F\202\352\275\235\324\230>h\227\304\275/\265\020>ocl>\333 H>\261\005\202>\334e\206\276\374\375\312\275\226\226\343=+O\274\276\024\214\214\275e\305\223>\333m\323\275\377\324\222=n\200\243\273l\225\235=\261W\212\275e\366\002>;{s>g\211C>_w\377=\000\334\021<\375\034J>\236-\357\275,R.\276/\262_>5$\353\273\033\035O\275\306\351\017\275?a\022>\214\241Q>\263\342\257\275\013\204r\276\323:(\276\255\343S\2753\240\207>\365\374\271\275\300!\232>`\2163>}\n\235\276\326I@>S\361\020>\362G`\276\370J\313=`m\000>\232\262\226\276\351Y\000>k\272j\276\320\246w\276\026\244\303\275\034\353\242=b\303\211\276\237K\267\276U\204\271\275S\204\356=\333\225\342=;j\214>\353Zj\276\367\240\251\274\305\036\007>P\031D>\232\324\356>o\237\211>+&\352\275\361\254\310>\247+W=#\016\200\276#\230\307<BP5>%\223\230\273\2055\204\276\250\346\220=\024\335\357=\254-Q>&^#\275\342\023|>\022\353~=H\335\223\275<\310\322=\323K\322\275\227\373\327\275#\345\306=\035\n0=\220R\016\276tL\213>-\n\035\275\342\311h<\267\345\031\275\34041\2760\2457>\206\021\230>1i\266\276\206\3601\275|\354\261>\331_\200>\325\3700\275/\001\002\276\316\016\262=:\3776>8hI=\276\333\035<qR\272>\361\223\351<\343\000\306\276\324\334;>\264\342G>a\244\010\275\240Q\014\276\340n\304\273\001\032\225\276\204\274?\2767\235\221\276Te\025>;\354\'>\314\036<>2Ek\275\346R\212\276\177$\001\277NO|\275\306\"\224>\342\002\361=y\267\336\275\316\027g\276\005X\204>S\325\250<\243C}> \036T>\316,\356=\017Q\251>}\262;>\210`\001\274=V\343\275p\363\215\274Jx\271>od\204<\231\215\230>\243uc>\025W\224=\230\332\217\275\365\237M>[\226\227\275\007)\310\276\0176\037>\342\300\021>o\023\232\275Y(\306\275[\313\001>\223P!\276\340?\307=$Wh\276\374-\370=\310\276\n=\336\022`\276\274\351\345=Mz\251>\013\000\250\276s|\005>\302\310S>\005@\252=\020\027\020>~\332\006\276\252\277\030>\030\236\256=Kre\276\2179I>\366j]>\341g\266=\n\027\361\275\022E\232>\335t~\275U6N>IK\221=f\226\037=\323\311\271>\254j\335\276\t\222\026>G)Q=<\243\035\276;\334\201>,K\003>\200\200\333\276\240\347\376\274\303\273a>`n\326=_\316\243=u\314\356=|\274\244<\245\007\300\274\372\201\022>-\n\207>\212\370\005\276{\027n\276Q\205\037=E-\200>\000\320\033=\243}\347\275\t\206\313>l\326L\276\341\020\212=@5S\276\3348\204>\363\271B>\036B\373<\330oT=\271\3163>\311}\305\275hmI\276a\177M>\277\367\303=\345M\022\276\353Wt\276\237\354\371=.bp\275j\0257\274}\265\220>5\024\217\275A\302\223\276\246\373\323<\210\242T>\316\247e\2763\350\245\273x\304\361=\275Di\275\021\362\265\275\t\212\003\276\367\005\217\276\227P\256=\337\265\033>\316h\243=\203\023\343\275t+\351\275F\236\275\276\345\342H>,\264\265=\010\332\254<\357\311\263<\004\024\032>\3107\344\274\242\014]=\217/\034=\027\212\247;VY\364>\331\221\344=\337o\271\276\363\242\217\276\371\274&=\332\017\231\275_\320p\274+l\243>\271\353\206>XE\027\276\245\225\300>\302\341\342=2u\236>\322S!>;\226h;\006nA>5\3373=P\367\260\275v\371\222>\032\017\264=\034\337\204\276\375y\276=\350\000\303\276\214PL>g\305H>\277\221*\276c\277\261=\205-\031\276\300S\341==\031\262\275\256\227\035>IG\030\275\346\312\264\275q\210\203=,\357\003>\016[\201\275\313\035!=\t\205\242>N\3156=\213\267\253\276\360PG>\312\034\326>p\322\205\276\3617\332=\016\222z>\372j\334\274V\t\036\276O\275\327<fi\356\275\300\203\300=\304v\265<\307\334M>\031S\231>Q\032c>=>\244\272\"\234X>8\251\017\276o^\375=\027K\223\275-\036\203>\255\360\221\276ui7\274-M\010\276\226/(=\271A\246>\276%\205=\310\027q\276\324\n\003\276\223\"\177\276\326\267\325\274\305\212\243\275\253dZ>\204t\331=]\345\354\275\206\354~>_\357\213=\275F\311>\001/\001>\026\t\336\275w:\223=H\n(\276\331\245\213\275\300\364\000>\237i=\276\264\375\207>\354\374\352\274_{\202\276\007:\346=\214.E\276N\233\014\276\232\001\254>3\3234=\2204\325\275]\244\316\275\350\234\352=M\"{\276\246\355z\276Iy\205\276\036\215]<\224\237\240<\237!\244\276\246\351\230=4\201\333=\354N\347\275\023\256\211>\006\307\213=se\262<\360~\033>h\212o\273\375\026\036\276\343\223R\276Bw\032>G&\247\273\313\345\341\274\303%\207=\025\355\215>\276s\210>\332\341\354<\243\230\224\273q\013\031>\017\330\242>\000\335\022>\236e\341\276K\273\323=\354K,>\"\216\020>]$\226\275\354\214\221>m\"P\276t\257\217>\226;-\274\211q\r\276\210\237\260\276"
      }
    }
  }
}
node {
  name: "conv2/kernel/read"
  op: "Identity"
  input: "conv2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/kernel"
      }
    }
  }
}
node {
  name: "conv2/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "bD\211\274\344v7<l2w=\r\373<<\220]\227\274\037\354\364\274;\337\337=\264\216H\274"
      }
    }
  }
}
node {
  name: "conv2/bias/read"
  op: "Identity"
  input: "conv2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/bias"
      }
    }
  }
}
node {
  name: "conv2/Conv2D"
  op: "Conv2D"
  input: "pool1/MaxPool"
  input: "conv2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BiasAdd"
  op: "BiasAdd"
  input: "conv2/Conv2D"
  input: "conv2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2/Relu"
  op: "Relu"
  input: "conv2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "poool2/MaxPool"
  op: "MaxPool"
  input: "conv2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "flatten/Shape"
  op: "Shape"
  input: "poool2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten/strided_slice"
  op: "StridedSlice"
  input: "flatten/Shape"
  input: "flatten/strided_slice/stack"
  input: "flatten/strided_slice/stack_1"
  input: "flatten/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "flatten/Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "flatten/Reshape/shape"
  op: "Pack"
  input: "flatten/strided_slice"
  input: "flatten/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "flatten/Reshape"
  op: "Reshape"
  input: "poool2/MaxPool"
  input: "flatten/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense32/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
          dim {
            size: 32
          }
        }
        tensor_content: "m\373:\276\362n\262<\020\333\310\275\316Ig\274x\256\030\273\247i\375\275\225\016\307<\254\214.>HO\364\274\311\362<>PQ\353\275l\005\032>`\"\025\276\270\027\271=\003\226@=ww/>\365\310H>\315\252\276<\334\257\304=5\373\027\275u\237\330\275\025\247]\274\322\270\306<\335\034\177\275\213\2209>x\006r\275.&\024\276\'\364\246\275\243h\003=\006\2441>\211\333\221=k\362\370=\367\207\360=\005rz\276\336\257\257\273\0008\377\274\320.\343\275D3\031\276A6\343\275\331Y!<^\n\225\275\224 \005\274\\4\005>\367\312)=\321\233\'=\232]R\275\224\272\r\276B\343\">\204l\207\275$*\000\275\201\t\236\275\263@\250=/t\227\275\233O\365=[\222b<\202\0068=:\017\375=\333]\332=\263J\220\275\311T\023=\021\251\037>\315:\370\275p\363\315<\t\223\303=\023\274\r\276\345\255j>\326\262\\=T\035\347\274\240\233w\273\216\263\202=,\317\341\275f\347\027\276\336\311\t>v\367t=\265\3471>\003\315}\275\367\022a\276\257D\010=\303\237\242=d8\366=\352_\221\275\336)\t\276$\244\330\275\272\026\353\275\224\223(<3\202\205<\237$8\274\204\001\316\274\226\"e=r \272=\323\207\350=#\316\327<I\277\023\275\216\321\337\275\265+\017=\'\355\304=\027\205\010\276\201\"\364\275\366\3555>\257\366;=\344\272\206\276\355\026+\276\000\343\210\275\264\261\263\275d\206\303=\223\270\245=\364\276\200<\323\"\255<\235{4>\\q\350\275K\204\221\275\237o~>\277\275\205\275 Tw\276\372Q\217\274\216\325i=sTE=\010\214\363=\375\201\022\276\224\375\274\2755S\036=\252\3254<\351(D\275\341\364 \275\217\231\264=-.\227;\014e~=\274\223K=^U#<\3176\371\274\202B\322\275]\212\326:\t\203\264\275\316\375\277;\013\251V\276\325\014 >0\233\340\274\233\220\002;\020\232\254=\243\203\273=\002\213\035\274\234\234\372\275WT<>\031E\242=\241q\240\275\214\0072\275\324#\326\275c\232\017>\3710\330\275i\272%\276p\340\274=\0053\260<5\275\302=\360\024\016>\3765\2728\243c3>\301O\027>Y\343\221=C\357\244\273\357\210\346\275\"\237\367\272\230\237\374=\270+c\273\312\244\352=\024\211\234=\374\274\345;b!\363=\2732@\275b\341\250=\225N\261=\2521L>\224c_=\223-\305\275\267UM\276\031\225\323=L/w>\351\221\277\271 w\225\274\225\314\276<\335\303\226=6<\027>\217\221n\275\360\215\254=\001?\231<9\020\214;\346\'\231=\241\210d=\206i\n>R\326L=Y\232\244\273.\034#=\261\017\000\276z\244\377=z\354e\275\216\275\254\275b(\204\275\263\3027\276\375\355\253<Nr\005=.hO>\354*a\275\371Oy\275\254\260\375<\257\214#=r\265\237\274\242\322#>\245\345\\>t\302\031>\300\213\324\275>\351\273\274>\375\022<\013\233\243\274e~<=\374l\276\274\356=1\276\n\313\267\275\202y\274=\254\311B>\305N\270\275\340h\335\275G*\003<\034s\343\274T\2416\275\252U\214\275W\262\225\275\323\302\020\276P\302l\274,xF=\3655:\276\243~\n\276t\220\271\274f\356\344\275\260\341\357\274\377\024=>+!\037\275g\317@\276\273\271\330\275D\373\271;\330\253\330\2750\006\332=\033\277\003>\366\005J\276f\022\032\276\274\3123=\241\377\325=\340\217\234=\204\301\004>-\341\021\275$\2732=$u{>\312#9\275\240E5\275\"\243\214\276\017%]>\314G =n\242H\276\3778B>\375=\304=\250\206\250\275\230\3002>\237Jy\276\n\031\r>\262\333\217\275\350\365\273\275\200Y\341\272+z\336<>K~=\353\033\226=\3247J\276\300\2356>Vc\315=\332\315\204=H\214(=&.X\276i\356\003\275J\3701\275i\244q>y}#\276\260\305F\275\323l\243=\2145\232=\375U\022>\237\244\347\275\036\250\373\275o\013:>\017\013\225=\323<q\275\336f\231\275\373\250\032\275)k\251\276u8P>\371\\4\274S71\275\300\331\250=\263\337\333\275\323\331E\276\233\333\304\275f\241\n>N8\255\275t\263V=\204<l=,\3338<~\026\n=\265\335\201>B\203\024\274\302%C\276N\325\274=@\313\214\275\225n\213\273\307\210\020\2755\200X\275\027\250\350=\340\207\255\274j\320U\275\346\031\004\276\026\201^\275\\\314(\276\"\t\001>\362V\022\273\256\331\344=$Z\207>|\3634<\230\026\r=dU\001>\010\324<=Z6\r>=\003\354\275O\2015\275\032\301\331\275<\234\351=\026h\206\275\031\235q>\033\3406<\212\275\007=\327\266+>\245zr<@D8=\356[\342=RWq\275\232\275\303\2757JS\275\024\276\005>\211\264 \276\205\265\361=E\r\\>\257)\257\275,!i=\276\016\037>\231\314\372=\264a\312\275Q\t\217>\206\315\233>\331\245\370=\334\212\335={\242n>Y|\371=\nJ\004\276\371\324k=\333\024\325\274\242.H\275\316\030\236=U\361f>\335\334\223=H/Y\276\272d*\276\304?\256=\345=!>\007[\023>\265\235o\275\344\263\r>*l\r>0z{>q\204\270\275\342>\033=\223)\014\276\224\347\334\275\264Q\013>\377\3451\276\316\020\243=o\000\374\275\301S\255\275Ne\277=J\265,=\212\020j>\226\357\264\275\305\275\213\275\315\372\211=\0211\t>\233o\271=\025\216\362=)\274\262\275\372\214X\275|U\017\276A\234U=MA\332=\256\333\'\274?\304\'>#1S\276E0C=\323)\224=\200^\246=\270\266\025>\344\241\242=\307\362\313=\'\237\r\275Q\330>\276[\251\025\276\2232Q<R\270\021\275\020\264E>+&\246\275\210g\300=y\213H>o\264\317<F\271\352\274\345\000\377\275l\203t>\214\264?\276]{+<\205H\232=nS\304\275\023 \263\275\177IA\276\303\372M\275p\341r\275n\rh=\315\256R>Cu\006>\237w\212;r\207\233\274a\003y=Q\264\270=Xu\312\2754\320\355\275\330\256F\275|h\341<,\2342>Q\217k\275\372\324\036\276\312p\350\275N\nU>4\302F>\236Y\312=\023\335\021\275\3602\236\274\314^\276\274!,d\276\027\3625=\251\301\023=8\3428= \020\006\2753\222\210>X<9\276_\223(\276\370-u\274`\336\355\275`%\337;\222P\305=\365K\"=\321\317y>^\007\030\274\240\347I>\212\343\013=\334\312\340;j5\303\275-N\016\276\324\rE=\022V|\274\360\006\207=#\354\263=P\214\005>\3127\"\276\271\244Y>\000\t7> \2461\276\3533\353=\374\343\021\276\010\203\022=\216\274\005\275\266\311\262<E\326\027\276\312x5\276b4\n\276\'\025\256>\257H\207\276p\351p\275B\347\021\2762\177\231=\000J\317\273.)R=\234\273\313=d\255\003>.\370\332=\332\373\276\275J~\010\275\327\304r>\247E\337\275?\375\204<\010U\200\275KD\364;\330\240\265=\026\021\253=\017\227\353=H8\277=\211\004\241=m\333\313\273\210f9\276S\3311\276\035\203$=\257;@>= \304=\002Dn;\035\034\271=\275\344\225=\350G\273=\231z\250=r\211\255\275\227\316\035\2764\325\031\275\223}h\276h\261:\275\254\363m>km\352\275V}\207\275\275\367R=G9\026\276\273r\221\275A\335w\275\362R\000\274\013\205\310\275\216\321\010\2768i\362<\224\014%\275<~\361\275\025W\275\275\220\016\324\275\356\266\025\275\340\264<\276\262H\036\276B\310g=\3234\020\276\365^\241\275\337\024\371=\231?s>\254\371\201=UK\243=\266}\213>\303wL>\267r$\276\275\n\007>HCz=\270P\376=\340\230\321<\002\201y>\277\347\016\276\246\216x\274\24781>\030\240\263\275\3457\274<\2622\273==0m=.\031O\276C\267\010>\324\256\032<l2z\275g\0248=\357\036\200=\017\272.=\223j\220=\377O\021\276\357\220\227\275\275j1\276\241S0>\321(\t\276\206\016\337=\227\256\376=\360\203;>e\177Y>\367f\031>\365G\343=Y\352g\275\230\357\027\276*\200\267<\025\352\271\275\240\330\267;~b\364\274\372\261i\276y\331\003>*3\242\275\205\223\347\274\273\2209<$\3337\276\023\372\357\273\344\242\273<\255\252\317\275d3\340\275\222J#\276\005\376\357<\353\256\332=N\257\353\275\001\0023>\326-!\276\214\370\232= \345\337=\304-\323=\001\242\215\276\tEa\275\347%\017>w\240\030>\177s\364=\020t\275=w\233_\274\347<F>\342rT\275\3353&>\203g\024=\333\212\216\275\222G\226<\372\3264\275\266\365\305<;\250\355\275x\204\203\275\000V\\>\245$&\276\360\314\303\273>\016\337\2742L\036=\366\353\337=P\026-\274V\0252\276\361\341\305=\272\377\017=$sP>\275#\207\275\243F\230=\n\230\334<\253>\361=\224\320\271\275\270\000\000>(D\333\274\3150\274;\334\316t=4\022\200=\322l\230=\014\034\314=\230\271(=\373\207&>\274\337\363=\361\247\004\276\017C\016>\242\002U>\033g\250\271,\312\240\2747;:<52\207=\376\347\377=\235\206\302=>H\304=\001\026\r\274\330!\025\276fX8>oR7\276\326\206\025<\033\277\350\275\007\224\'=\356\267\315\272u\017\240\275G\001\212<p\0138\274\033\253G;\t\300\274<\r!~<r\342*>\t\274\304=\314\021\304\275b\313\031>\373[1\276\237\355,\275\375\266e\275x\375\243\2751\204\005\276\001v\330=\303\337[=\253\244/>7\255\024\276\312\221\351=\262\0162>\277\222\t>bic\276\334/\r\276\236Re\275/\224\027\276(b\306;\025\334\010>\016\203<=\367.\r\276o\033\210=\261\275%\275\364\233[\275\365P;=.N\351\275;1:>c\265\030\275\007`-\274\223|)\275H\246\350\275\351\242\254\274\257.\355<\361Fv<\003\010\013\276\302)\372<\017\201\346<v\307/\275\325I\022>\342\351$\276\263\275l>\366\341&\2765\014Y\275\277V\351\275\236\005\311=\236\272}=~\264\014=1\226\275=\303\224\324\275\2336\033\276A\355\206\275/\r\375\275d|\232\275\t5#>\014\216+\276\234\311^=R<\326=\360\365\236\275\260\353\034>\274aV=]\347\257=\002\272\350\275\2146\253=5\357\004>m\204;> \210\016\276\245^9\275\366Y\021\2751\026N\274\230\307*=\260\177Q<\350\217V>\311\223k=\314\020l=~\031\356<\316\004\336=\377\017\271>H!\014>?\034\013<\300\351\310< I\001>\367\264K>\035e2\276U\350\314\275.L\022\276\213\023\347\275\013\300#\275\265\025\240\275_\331<\276.)\343=\306a\306\2755i;>\355p|\274Q\3065>M\234 \275\210\2368<\203e\322=\313\207,>96\021\276\002\'$>]\360[=\314\256\">\351\233\307\273\352\023\265=\223\243\250=1\026\313=#$\023>xx9>\323\030\230\275+\367\007=\350\263\364\275\177\032/\275\322\006K\275\220\214\030\276\303\375\321=P\3713=E5\237\275\003\352\260\275\016\020\353= \333\006\275\363A\253\275X\010\010\276\202\250\010\275\324W\017>\225\2700>\221B6\276\342}\206\275\316\257Y=n\n\220>\241\031\270\275\'\311\256\274\304\0059=\254\240\245< 0G\274\233.\007>\253p\246\276\363\254\332\274F\312_\276>\214\036\275\211\3251\276\335G\210>T\211@<\223\341Y\275\323\002\313\275\333E\351=\366H&\276\016\246\312=K6\003\276\244\326\023>\267\024\213\274}\001\331=\374\273$=&\356\035\275=\001\264=@\315,=-\231+\276`\224\346\275\323\266\006\275\177\205(>yx\031\275\037m:>~\267\374\272\210\332\313=\306`\023=\200\305\270\275\245\013\032\276o\200\006\276\3119z\276]u\236>\377\335\306\275\262$\221<dv-;,\214N\2762\301\344\2756a7>\254\037\356\275\246\317\020<\205\270\006\276\ta.\275\204\334\202\274\245\247$\276\365G\035=O\027\262\275\3366Q\276\222\302<<>\234>\275c\027\264;q\365T\276{\0208\275A&{>\311\336\340\275r\267\212>\0061?\275\324\375\'>\377\334J\275F\302\267:6:\006=\024\235\033\275\236\022@=\224\302\010\276\013\203\233=\306\357\023>\377\035->\003wT>:\323\373\275p\221\203\274\225\340\341;\243\324\334\275\032\270\023>\270\357\251\275\363\261\367<|k\230\275\262\367\033=\352\333\332;AbO\275o|#\276\373\312\267\275\254\321&\276\264\334\327\274Nd\245=\202\307\357=\257\272\005\274U3\245<rk\037\275Q\266\206=\374\206\010\276-\376\317=\2556m>_(\227=P\231\017<,(\306\275\252\017\"<\335\317z\275\r\227\034>\005|\337=\036\220\026>\351_\033=\r\244(\274M\322\006>\0274\022>\0321@\273\243oh>:M\262\274\374\335 <\245\243\302\273I\2269\274\376H7>\255\036z=\\\213F\275\014z@\273\203]\022=}\352y=\202:\037>\355\261\273=vn\277\274\354#\313\275\301]N>\274m\215\275\025>\275=k&U\276F\\2>`~Z\274H\326\027\276\366Z;\275\017\301\006=\372F\332\273\317u\303<H\345\275=U\367\034\276\253\n\362=\265\036i=\320\240\366=O\216\003>\327\207_>(\014\004\276E\231\331<\264\211\200\275\340\0065>\236\010d>\205\260\271\273\271\035R>\032 \017\275G^\331;\346\'L\276\335\212\364\274rRf=w\021\270\275\255C^>\307\222\372=\315\325m=\363}\232=\"\206\331=4\302b\276\260\300\270\275\357\036v>~\r\000\276\375\250&>y\005\303<+\343~=\275\016\354=L\204}\275\200\334\220\275\035\"\303\272\t\320\343<\022\205\267=\010\036\034\276u\304\177\275\256\365\237=\263U\245=\323O\343=a\236i\276\251?B\2768\234\322\274\361\033\024>T1\371=\023\367\316=\345P\201>\315\037\303>\375\266\346=9\302\321=}\330\315=\244}\316\274\372S.\276\253.m\274\234\324\237=\010/\300<\0312\364=\232\214\241\275\007\273\261\275xy\310=\242\006}\274$\244,>\024V\n>,a\321:A9\250<\277\010<=\312C\262<r`\021\276m\254\377\275>\013\224\275\244\207\266=Y\374\326\275\'\306\302\275K\206^\274\253\311\350=H\370Y=\203\032V=yF\235=w\321\223=1\354\322=\377\031\022>\345\372K\275\227)\326\2754\035\034=\337\240\365\275H[4>\002\303\314\275<\205\326\275\266m5=ao\340\275gtx\275\271=\267\275h\252\350\274\222}\230=\362\246%\276 \3307\276@\004\326=\232\342\271=U\1770\275\204\006\244\273\354-X\275\220\346;\275\257\251\017>\272IR\276\030\300\265\273\235\231\272\275H0\211\276?~p\275\217\235->#\326\005>\215a\200\274\306\025\002=\231\254\3548:\372\340<\263\277\323<\366\230 >YA\204=\254T\200\274\336\030\350=x\371\'=\323?\233\275E\242\301\274\016 \331\274\241\242\373\274\351o\035=6R0\276\266\204{\275@\374U>L\344E\275r\021\271\275\310<M>\242\016\034\276\267N\005\275\233\257\n=Z$\014\275\204\217\232\275Yj\347=\351\001\235\275\240\377\272\273\342\2166\272\037\335\203>\013\252\240\275\363\225\232\276q\207\203=TK\034>\235\277#\275^\033\231=\006\227\215\275\303\332Q=`\231s\267\240\337\200\275\240\356~\275\020\252\363\275\370\3112\275\314\361\367=4\252U>}\3030>\262\202\021\274\240\252\005\276\221\244m\275f\234\007\275\212\211\030\276\n\327\233<\000C\242\2751\315\307\275\326\3668=d\247\266=\026\237\224\276\"\366\371\275\256i\264=\003m\013>\270C\273\275M\367\225\2752\316\006=\240\306\271<\237-\006>.\263\331<9\222]\276\275\0200=*\247i<\226*\016\276\367\372(>\214\345\035\276cN\007\276&.q>-\256\334=y\252$\276\260X\311\275\210\251\327\274\376\\^>\331\245\266\274M\332\212\275O\323|>\270\034$=d\262\365<\325h)>\036\'\022\275\002s\350=\334q(\276:Z\320\274\355\014T>Z\253\257\275\373\255\371;&\245]\275\024\374\350\275\2343\217=\251\316\001\2751\363\233<\200\020\354\275b\310\212\276\210>?\275!\212U\276\2164r=\3003\211>\320\017\361=I%\315\275\246\236^<$\367\321<\271m\376\275\021\271F\274S\342\313\275\274\371\001\276\367\304A>\361\334\262\275;\023\276=\216\2713\275\275\225\352<\244aQ>\024\037\002>\212\270\347\275\303\267C\272\013\374\237\275Lv\310=\367~\252\270\363\336=\276\351\251\366\275\321u&=k\347\t>\214U\"\276i\226\210=P\257\000=\317\260\224=W\240\037<\366W\200><Iy\275/K\"<\016|\n>d\0018=I\262\207\276\"F\235=\355rs\274\222\207{\275\257\351\024\272\004\211%>\222/ \276\205G\352<\205\006\334=\341R\206<\300\024%>\227*-\275\373o\031\275D\341\205=o\354\220\272mK\303=\030`\346=>c\033\276\367\315j>c\221p>\220A\206=\366\302\020\275\037{\311\274y\352\006\276\322v\236=\331\370\202\274\262\340o>\345a\026\275\220\373\003\276>\276G>\024%\010>\346\223\206\275e+\234<8\212\002\276\032:\215=\250\201\010>\035L\336=\346K\317=f\247\271=\026k\022\276\033\025\004>\250\246\377=\266N\000\275w\356(\276\317\356\216\274?l\316\275\020\351\002\276hf\000>\373\242\200=\372#\035\276\222Do>N!\337=\333@a>\016Z\234\275\200\354\'\275\241\014\232>r\217\231\275\020\233\030>\344\201\007<\021FY>\371z\024\276t\303\244\275H\372\215\275\270\250O=\327w\316=\247\333#>\2350\007>\372\235\350=\333n\345\275\272\342\027>\347B\007\276=\005\020=Q\353`\276r\202\003\2768\331I\275\222Q\335=\226\225\007>\325(\005=S\265\237=\250q\242\274\326\315\010\276\227E\225\275\346~\t\275\272\025\272>\027\233\220\276\360\371<>\3420\204>\204W>\275\321r\304\274\201\004g\276\033\311\350=\353\331\246\276x\371@\275\2377\345=F\221\346=\261F\302\275SyY=\355\235y<\034nE\274.\333h\276\203\0053\275\017k\274\275\241\203\240=K5\304<\316\315u\275g>\014\276\250\367*\276K/\304\273\261\026\237<J\227$\276V\266\245\275\007\332\206>\037\035\001\275\261K\357\275\367\356\343=\t\242\r\276\003\030V\276)\004_>\025\262\364=\215\377+>\'\327\252\274A\3460>\326\224k\275\376\0101=t\272\327=)\2022>4l\221=n-N\275\262\206\223\275\020\236G>\231\275\257\275\267\337\006=\027Y <E\303\374=\370\274\002\276\341B\322\273\362.1=\232\301\244\275\231\357\'>a\334\245>\264\353\300=\234n0:\344\313\003>|z\305\274\\Xx\274\240\362\260:]Xc\275=G\004=\361\274\010=\355\227\020\2747\333\303<\013]\">\260\316$=\0255\n\275}\250B>\277\273\246\274\363\332\322=\247Q\032=\320\024\276=\"D\005\276\215\225f>\213iw\274\027}_\275C\251\215\274\017s\266\275s\022\302=70\235>\217d\216\276\316J8\276\023\220\037\276vS\t\275\337\031\241=\252\207\255=\302h\267\275\014o\356\275d\032\336=\365\033\036=\005\221\373=X\264\023\275D\221\261=\030g-\275\224\0226>\275\340\210=na\252\276\370\2026>2M\216\275v\353w<P\272\356\274\265\200m\275\263g\"\276\346c+>\220F\274=\265)\315=\212\177\002>\346\272\262=\360\310\035\276\377c\277;\r\214\203>\226\035\330=\212\023\230=#\317\204>\032\256\025\275v\265\272\275\001p\020\275Uq\026\275\002\005\275<\350K\376\275\246\033\211\273\363\373\351<\273\205#\276!h\026\276\262\322\t\276,j|\276\345\344\263;@\222\370\273N?#\276\352\347h\275\017Q\276\275\325\327?\276\320\266\007=h2&\276\216\'B\275\002k\301=iG\034\276!2\026\275\212J\364\274\274I\204<\326\353->[F\272\275X\250}=\256\256\367:\261=\037>S\201\032>y?\"\274\361\354\320<U\323C\275\340IY\276G\266\371\2756\332\303<\002|\226=\332\255C>^\372\245<\272K\n\2757\330\004>\244\225\231\275\244%E\276\003\363^\275\354\342p\275\023v\016<\243\231\203>\362\004\314=f\347\336\2745\256\234=\211IV=\232\242\023\276w\377\005\276\'\022\311\273aT\371=@\237\355=\345\353\033\276\001\035\022\276\305,X<\315\217)\276\352n8=!\264\r>k\251b=\253\013\031>\306\"!=R\237\n\276\317\006\323\275\255\303\244=\205\354\006=\275\266\216=\225[x=\005\240|=xT\346=K\3678\276\"\347\033=U\031\366=w\357Y<\276_\267=\221\3761=3h\300<\232\004\246=U\211\253;_\307\364=\255z\203>\231\264\246\275\314\342\214\275\'\362;=`\233o=\\\220&>\255\t\004>7\224 \276\t\261S>A\203\247\274\334t\263=_\"\332=\345ma\275\323\352\031\275(\210\345\275\326\272\035\276E\374C\275\217\310\353=\237\226q\273j\232 \275n\010M>\242\017\335\274~\263+\275,\002\236:V\347j=\021T\316\274II\354=v\350\371\274{\361,>\317\367\023\276<\355>=t\324\261\275\025rm>\366w\375\275*\226\033\2768.\270\275\346\377\375\275m._>\260K\003>\366tV>7\352\217=\010~\214\275\316\207q>\217\366A\275h\253X\275=\227\237>\216\234K\2766\271A\275\212\201\211=\365\261\024>h4\'=\"\216[\275\306\270#>\236\277G\276\335A\273\275\217\027\257\276.\035\205\276(P\335\275k\236\030\276K6\'\276u\270\371<\\k2\2769\265\276\275]\262n>w\353)\274\250\010\356=\271e\277=\345?\034\275\341\320\017>\265\201\306\275\345\301\325=\3660\004<\021f\016=\276\276\265\275W\005\216=\364\273\372\274\331\"\361\275;\013\215=.\223H\275\261%\001>\254\337T\275\210\341U>{\325\034>J-$\276@pv\275^\n!>\301\005V<n\305\r\276\333q4\275h\322\025\276r\260\276=\357/Z\275M\354\017>\343\240\311\275:C\364\275\250]\002\275u\364\002>\340\201\226\274\244fI\2736\320\241=\377\024\336\275y\320\327\274\203,\025>4u\004\276O\277(\274\221\244\323=y\357\020>\342\373\277=\n\"\200=O\223c> /\222=R\036\236=\275w\247=\007\353Z=-c\206\275v\332\002>\r3\001\276\022\305\272=\237w\006>\303\334\241\274\251\200\016\274\016D\300=\267\216\217\275J\271\272\274P\2206\273y\036\023\275fL\204\275\352\262\214=<*\025\276\242\232\032\276\345\254{=\213l0\276\262q\020>\260l\202=\336\340R\275\331fY\275:\350#>\356\010C<\206\211\213=\305\363\366<\314\306&\276M\225\316=iX<<\230\004]=<9\t\274\006\037\022>\n*\026\276\013=\016\276\262\216p<\037\343\031>\356\366\376;\321L\314;*\350\036>Mn\013=\212\336=\275\347\375\342\274!i\236\276\355\2538\276\271q\336\275\222\2565\274F\2253\276\210\276\200\274\020E\014;g\241\272<7H\240\275\274\242\032=\335A\324\275\216\266\225=\242+\007>A\261H=\326\345\026>\272$\237<[.\261=\320|\350\275IT#\276B\376\302\275\367Qm=\205\202\\=\0079\217=\357T\233\275\r\232\310\275_\326*>\363(\371=\000\033\201=\355OW=\034=X=;\206\255=\225\347F\276=\340\010\274\re\246<t\013\377=\257\251\007=q\364\337=(^\033=\203Z7\275\244\225n\275\246\373\330=Q0\031=\345\003\207\275\3416c<\341\302L\274oSd>\262\347X=\001\035\232\275\331\034\214\275(e\312=\3746\317\275\377mF=\271\274\346<\371L]=\227\312\207>!\342\247\275\204\371\022>?\345\032=\330\272)>R_Q\275}\301\'\276{\260h>\034\316\336=\324nj<;1u>\247kx<\r\230Y\275\177;\n>\031j\020>\340/\250;\031D\003=\356\237G=Qb\005\276@\262\314=\022\367f\275|\204D>B\313\211\275\224\342\353\275\312\005\207=[\3575\274\237DW=\227\372\311=W{\253=j\365\357=w\311t\275\037\\l=MO!\276\317\035\001>\302\232\347\271\214\305\022=\335\207\360\275}\003X=lW\003>\305\254K=\225\224\235=\016}\200\276HW\241=sU\352<\n\227x\275Ws\271\272/\037,\274\230\236B=b\217\323\274\231c\206=B\200\025>0\347\205=\202Vp>\252g\331\275\267\262\376=\307\0105\276_\334\363;\271|\251\275\275\021\017\275\217\360\375=\202a\002\276\362\022#;\3704\261=\323\313U=\301(\226=hI\256\275\2042\246=\223\344\216\275\237\354\031=\361\334\021\275\235\2207\276~\2242\276\005\266\205=Z@\377\275|o!\275[\0263=\307\247r=[\202%\2769h\271\275\270S\360=\026\245\271\276\341\205x<\357~\362=\026\331&>\313m?>\304U\022>q\202\230\275\010\002\354\275\231\263k>\\\303K\275\016\264\r>\244\236\r=\261\355\220:\216\342\315\275\254!\002\276K\215\035\276S\370d\275\360\0344<\377Mn>j1%>\326\341~\275\216\312R=g\235,=]\271B\276\004\263M<Eh\231\275v\275q<\314\336T\275\346\322\'\276\217\232\372\275\233\343\375=\3348\003>\240\306\240\275\207>\n<+\256\244=\260\006\013\276\233\205l=\276\263\343\275\357\312\205\274\275\377\000>\275\321\n>\300\205\270\2758\220|\275$\032\016=\"\242\017\276AA\336=\241\330\002\276\331Q\205=b\362p\275\304;g\274\336\341\200\275x\002 >s\222\264\275\371\241\366=\330\357\247\275\262\014\210<OK5\276x\374\354\275\346\257\227>m\022u\2757+\211\275\312n\017>P\270%>\366\341\010>7?7>d\020\250\275\017\264\001>~FH;H\225\336\275<X\331\275\362\260\024>L\321$=\367\221\014\275]C\334=\361gL\276\037\032\001=l\213\220=\020\241\r>\nd\307=\201\262\370<\002\347G\275\230\355\346\274>N\352=\353\002\372\275>\000<>,\240\314=K\204#=\316\276\024\276\362Qj=\363\246\377=p\207$=Wq\"\275b\004\t=B&\023\276\251\235Z=..a\275\341\031g<v[\356\274^\272\241=\217\270\001\276\017\032K>\272~\325=@\265R\274v\245\220\275\371\360\221\276\360S\000>\312\022!>3\354n<\266\374H\276\244\370\367\275v\321&\276\354w\201=\303\336\201\274L\210\000>%g\007\275\323d*\275\353\001K>\354\371\307\273\2747\202=\207\306k=\2639 <,\036\026\276\251B\231=\374\223\313;\007\201%<\324I\035\275\262\001\367<\220\222o\274\n@\220=F\321t\275f\335\r=\320BP<pm&=\026\310A>\217\203;\272-\305\337\275\336\201\r>\313\001\342\274\355\356\345\275V\241c\275\037G.<z\010\275\275\272.\377\275\354\356\315=\371\241H\276y\333\273=cY\032\276\026\252S=Y\226E=\000\325\311<\r\004\201\274i\361\006>\262}\017>\342\326[=O`)=5\264\350\274\301{\236\275\201J8>\234\r\245<\266c\353\275\336\345\324\275^Y\324=\365\2168=\364\002\210\275\216B\216<\315(\344=\333#\'\275\342\303\313=%Q\371\275\226\"\300;\255\210\354<\206\313B>j\231\315=v&\362\274\356I\244\273\302%\243\275\0252\026>\224\202<\276L\004U\276\203Ri=\330\255\313\275\201\321\n>\237\231\000>[v4>\274\301\252\2759\317\036\275\'\301\366\273\327\213\206=\233J\350\275\235\030L\276\020:\211\275\214\334Y=\347D7\273G\033c\275\301\350\271=\300\247\333\274\212\037\321\274\262\022\255=\2143)\275;R\317\274T\362\247=\302\256\254;\357\265:\275\010]\337=\205\005\335<g{)=\036%\023\275\016\355\233<\264]\354\275\332\315\216\274\307#3=\210\316\333=C$\210<6\235\006\276\023\230:<\232J-\275\310\035\020>\352\003\361<B\333\033>w\030%\276\224\275\016>n\273\003=\300\025\370=\324h\234\275\317\235\273<\275i\004>\000\002\037\275\311=\216\276\\\357v\275\261\374\377\2758l\032>\366\332M=x\330\212=L^\016\276\211*\204\274N\226\361=\036j\346=\267\252\310=\263N\203\273A\375\300=\370\256\324<\264D\202=\335\354\264<Y\177\006\2752\000&\275\242\362B\276X\210\013\275\310L\361;Q\307\026>\220\212C\275\216]\030>\335=\n>\034\364\313\275d\231Q\276G\343U\275ZS\264=x\013P\275\377\203\352\275\\q\340<\204\326\247\275)m\334==\357\203=\326!7\275{\356\225=\023!9>\027\345\223:a\001\215=c\376\360\275\316\364\037\276\3169\227\275\330V\343:\225k2\276\270\334E\276{j\313\275\t\331\264=\345x\305<\367*\335\275h\257\000>\217\330\272\272\265*`\276L1\020\276\005\210\301=E\304\'>\330`\220=\323r\276=i)C\274\322\224D<\314\317\361=\374,\375\274Ph\232<7v\344=+\277t\276dX+\276\267\327\343=\273\347\306<\026g\001\275|i\007\276Xn\312=\216n1\276ha\341\275\336\216\233\275\361y-=@G\257\275K\276\300<\2725\221\275\344\233\352<\223\272\227<\007\264\346=/\301\237\274\"\242\300=\256,\335=(\263\277=\331\251\003>\275\010c\276\361\374>\276b\213\301\275[\275\365\275qe\014\275\020\371r>\020*\205=ml\001\275\354\035|\276\237s\016>[\335;>$\016\013=h\250\212\273F\323\214=\0230\260\275Y5,\276ju,<\254\314\362=\275\3506\276\351v\t\276\232\361*\276>\241\023\276\247\r\t>g[:\274\372\271\261\274\367\237\201;\334\\A>\224\014.\276\251\231!\275\260Yz\275\310\010\033\2763\214l\275\222\347\360=\3206\204;\326\321\037\276\035A\220\275\003v\302\276\213rF>\\\310\036\275Ef\237=\227\315\037\274rI\032<\216*\211<\215\022n=v\375q\275\004\235=\274\364L\223<\254\004\345\273\346\305\224\275uL\365=\264l\023\276`\227\006\274P\223\t>\210\002\324\275\2078\353<pm\260>a\326\t>e\\\273=y<|\276Q\334\004=2\022\306\275\001\255m\276\253\331\231\2747\216e\274\313k\024>!\216R\274\233\277\232=.:\025\276#;\241\275\260\343\007\276\241\257\227\275\372O\344=\331K{\275:\217\232=g\010\220=}\306C=e\2530>a\220\261\275+\337\375\275h\317\243\275_#\246\273\037@B<\257\302k\275,##\276\324r\006\276aj.=\317\030\024>f\277\271\275\0042$\275\003W}= \232\336=\305\2449\276\321\037\231>\264\207\321=]\370C\275\255\253\034\275\267\237\t\276\253\327\263\275\332o\035>\231V\337\275K\243x>r\271\n:.\014\241=\361\004\351\273D\336l>\236\004[>\226\022L>\333!\001\275\273\231\345=\tD\247\271-\000B\275k\371\302=0J\003>\n_\330=\370\232\211>\"\r\265\275\245\037\027>\271\262r=\353\3762\276\276^\017\274\341\311\375\275\037\n\020\276\032u\007>9\034\373\275\323\260b=c\315 >&\256\014>0`n=\246\263\221\275l\376\266=\236\205,=j\213u\273>\004\361\275J\210\361=\010\265\270=\275\346\'\275\244{\225\274\262G\023>\255\212\313;\021\364)>6{\240\275\237\341-=\003m\340=\353=O>\246\321\025>\242i\244\274G\257\002\276\277\224&\275\302v\010<\251\371\271=\213\262x=\302A\225<&\260\306=a\321\036>X\030\246=\024\357\260>O\024\276\276\201\030\256\275\231\357\271\276\235\374m\274\366\314d:\177*n>\223\003\205<\226-\033\276\3321\357=>7_=\335\354\331\275\203m\246=\247]\334=|\314\352\274\250\036\330\275\203y\233\275\227\245\t\276U\277\373=\305\002\024>D\377\341\2756\345\232\275\2555\202\275%\315\034=\253\325\264;\227u\214\275k\217\255=g\037 >J\227U\276\311\365\321\274\320$\317=a\3018>\274\300#>F\014\242\275\210%V>\356\326o=A\000\227<\027!\031\276%\253E<\2278\231\275[?\306\275p:I\2763\240I\276\360\r\003\275\344\207\310\274\017\253\010\276A\225\201\275\204\327\003>\004|\200>!\216>\276\017\265\235>[\200\356=G\270\244=4\024\264\275\265\376\374\275\330}\023=hI<\276I\323\013>W\363\345\275\320\247z=Jc?\276\343x\022\276\360\265\355=T\245\034>\377\215\231=\226\303\030>$\317\370\274t<\252=\254\314\001>\372\251]=\325+\007\276\345\327\265\275\311\026\265=#N\303;\220\216}>\253\r\034\276]\035M\273}\010J\275\332\310\360\274\230d#\276/}\005>\351qp>\376>H;\355?\234<\245\333\340\275\231\220\242\274\347\260\202\275\225C\033\276\224\237\003\276\323\221\255=\356\307\005\275LMY\276\035\024]=\006\305\367\275\345\312,=l:\017\275\336\243\032\276\301|\210=\347\202\232=\263\253\361=\377\254\002\275\2368\200=\354\221\261\275\263\337\207=\213\323\037\276\000)F;H\016m\275m:\010\276\375i\363\275\243~K\276\005r\366=\301\\\240\275\306\366\006\275\323\037\353\274\220\305\257\275\261]\352;`x<\275\230\257[\275\301\225\314\274\234\231i\275\321\264)\2766\003\032<\214Y\305\275\036\006\007>q\250o=E\310r=J\327\212>\323\223\025<\205\204@>fB\021\276>\331K\276\361\212\203\276\311f<\275@\t!\276Zx\224<\016\023q\276\246\212\254\274\337\314\313\274\341\3420\273\256\363\331\275\rK\\\276\321=f\275\321o\342<\202R\016>\2452\010>\334\016*\275\003\247\304\2758\271\234\275\250B\237\275\tSh<\352\271\324=\204\200\244\275\317\314\257=\025oB\2760\rp\274S\013\002\276\250\223\205>\304\272\202\275\027)Q>a?c\276VO\002>\363\032\013\276\rg\216\276\331\361\262\275\263\317\235\275\2708\214>\307\262\224\274\207/C\275\307\230\302=\356\342\224\275\030g\241=M\240\026\276\275\323O>\021C\311=Y\003\240=\226\035\205\275\366\332\034\276\366-\036>5\221\020>R\234\217\275\214\271\340\275\336\026!\276\265ps\273\372J0>K\240\261=5\355\310\275\230\266r:\220MG\276u\331\342\275\000\363\276\275\200\360S\275\001|\242\276\246\237\026\2761mq>\014\216\230>Sx#=fen\272\035\005\243\275%\227>\276>\216\177=\271\315\313\273z\354\256=\034s/>\270\375\226\274\024K,\275\217X_=\236\n\324=0\314\014\276Q\014\225<ns8\275\223\341\220>O\030)\275\013\354\362\275l\321\211\275\317\310T\275\242\3773>\232\3528\276V\247n=?\021\020\275\305\006!\276\030\035\025\276\030\217$\276\037\325<\276\230\325C=A\025\375\275|\006\276<\375u\034>\267\370\206\275\377N\231=\273\032\200=\010O\032=\243\224\215;\022\351\024>\252\340\t\275\262\027\247\275\334nU\275C\237V\2764\244\032>\303\\\362\274\013\224\230=\317\270/>n\322e\275\3373(\2769\330\201>\336M\016>\324\"\354=;@\010>8\210\354=9\006!\275`:\026>RE\\=\320\364,=\261\303\332=\372\030\034\276\323\016w>\203\014\002\276h\327\033>#\n\322\275K\321\237\275\304\005#\276eZv\2751J\265\275g\331\301\275j,C\275\037\354\222=r\367X\275\337\345\215<L\251\031\276IS\264\275\376AL\276$0!>\244\350\331\273\221$Z\275-w\260=Bkd\274\3276\013\276o\005\327\2750~\363\273\2149\016>rO]\276f-\367=\217X\322\275k\003!=\240\317\301=7\310\256=\007+\275\275t\347\370=\024\257\327=\217\302\203>x\202\307\2750\324>\275\217\223(>\244\337\037\275X1\002>\247\004\301\274Rg\210>}5\351\2752qw>k\246.>\254\250\372=^U\002>\332G\274=N\305\275=\260Kk>\213\331\300=\260\275\001\273H\305p=\277\274\333=\236\212\241\275\3609\333=\030\353\036\276\230\355R\276\030\031\322\275{\332\203=\334\303\362\275\347\266\212\275\";\216\274}I\267\274\023\265\271\274\272v^>px\244\276Y\224\244=z\347\016=\302\017\r\276\3764\371\275w\376\215\275\352/\246\274\214\363\2328^ez\275j>\321<\332W\371=~\035\014>\277^O\275\006\006\257=\301\352\345\275\336\177\021\276A|\335=\014\3469\276^\353N>\331P\233=k\035A\276\261m\013\276\313\202X\275&\262\226\275\312\313\303<H[\226=8\003\231=\242\366?\276\n\342X<E\014\322\275\'\270\242\274E6\267\275\251o\261\275&\326A=\232\252\344=GO\020\275\001)\017\273\201\221G<\026\332\007\275\351U\030\276y\000+\276\341\222\026>00\246=\374\372F=$!P\275\235\3221\275P\242\027>y\252\262=v\375\004>\363\027(\2749\374q\2735\260\242=X\241\005>\200\276\327=F\263\020\275\35206\275o\245%=\241Y\301\275\273m\024>\337\335\037>=\031\241=\360\303\214=f\030\347\274\2028.\276\367\016\013\276\250\373\027\276\245\227M\275\030F\213>^\022U=\026\177!\276^\277\225>\347\253\365\275g\304V\275\030\000\205\275\024\313\203=\246\202\000\276\345<\006\275\n\335\364\275h&\016>\360|\r>\271\245<>\310\304\035\276oU\022>\362`\350<5\345q\275A\036\025\275\216R\361\275ZD\241>\352\372\325\275)\370\037\276S(%\276\304Z\322\275\210v\247\275\021\263\354\275\027\014v\275\323\3623\275^\371\206\276W\032\305=\235\372)>\331\r\215\275\243]\007\276\264\210\333\274\244_\221\276ji$>\024K\300\275\240\336Q\275\346\017t=`(\212\274/\226V\2753:d>l\320#>_x\327=\366\211\002\276\242\0229>\327\374\254\274\270\331\331=\3702{>\342\260+=\374(4\276\301\346\204\275\377\002e\275\236_[=\355\314\007\276\004\245\235\275&\237\036>\350\374\346\275\200\273C>E\322\237\275~\250\230=\256\371\017\276\272\316i\276m\r\006\276\220\307\315\273K\177\263\275\216\005\000=\354&\361=\005\331j\275\376\317\010<s\274\010=\270U\373<\307.\004\276\305K\016>\326[\236\275i\006^>K\344\200\275\253z\261\274\262d\265\275?\327\010\276\311\210\307\275\3215\024==B\006\276d\253\353\275\302\320\004\276\304\224\010\274\302\372\320\274 D\264<\241\273\374\274_t=\276\351\261\207;\364\232\262\2754\3743\276\326\212D<C-O\2754\030\312<O\006p>\360\2408>\020\214\021=\004n\203=\031\342\371=\323%U\274}%\224\2744\221m=wj\r<Z8\003\276C\301\251;`\224\013\275\030h\272=\366@\201=\026\033I:\312\232\244\274\270*\006=9\227&\276\346?Q=t\325\312\274\0200\315=F!\250\274\002\234\331\275q\377\222=\007\261\241=tS%=p?\203=\364b\201=\357?&=\267\317D\273\306\273\312=E\240\316\273\330&\262\275\354<c=$\370\000>\257\263\237<I\361\030> \302\260=\021\2078>\360\350\320\275\027nI=M\\\360<V2\006>?^\307=\364\376*>\345\240\001>w\333\246=lS\022>\014b\206;\227\301\357<t#u=/!\202\275\232\323\314\275\005O<=\035%\035\275\350\301I=i\010T>OF\206=+\376i>\270\357\000>\227q\263=8AA\274X\204t=q\326\004\276\214\221\207=\032\366/>\336yd\276]\373/>\242\350\275<\017\374\217\276\231\372\251\275\300\335 =\2218\305\275>\237\250<\222\371\034>\257\203!>\204\236\233<\002=)>\376\022\253\276\313\354|=\214!\237>\321s\030\276\312w\361=a\224\247\275H\352\035=\037\305\367\275\317f\017>{#8\276Y\251#=\302\335\233\275\356\305d>\005\240\267\275\265o[\276\227+\331\274G\325r\276C\333\032>j{\365=,\324&<0\237d\274\256r\202=\303\027\270\271\305\227\010>\243\246\377=\n\205\252\275\263\307\177<\321:\353=\300w\002\276k3\355\275eJ/\275p\357s\275\321\020\302<L\024+=~e\215\2740\322\013>\022\373\243=\234\236\330\273\235\"\352\275z%\353\275?\351\037=K\tY\2750\215\032> \022\t\276\321\355\230\273\224\214\253\276#?\023\274G\370!=\345\325\305\273l\206><f\351\014>\342A\226=\244:\210=\266\370\334=\244\255\367\275B\303\272=i\"\262\275\334.\t\276\001\212\004=\211b\275:1\025\250\275\035\005\255\275#\332\323\274\221v\335\274^\003\025\275\265\306L\275K7+>\025=\r\276\340\234\r\275>\254?>\202Vc=P\021\207\275\307\376\273\275\371\376\327\272\n\016\033\276\2132\366=\3536\232\272\311T\326\275&\005\371<jK\024>\311\250d=T\3045=m\315\200\273\027\234F\276\007\313V>\350\211\203\273\273\201\007>x4H\274%\327\340=\306\344\n>s\345\'\276\323<\240\275\r\034\201>\220\230\314=YH\016>a\0369\276\330e\n>l<\357=\266\350>=^\367\336\275R\265\254\27579\241\275\264v\240\275\213\342\315\275(}\223=t\317\000\276\252\3401\276\337\017\233\275\355\210w=\274\351\233\273\317\232=\275\327\355@\274\307\260\275=\235\375c\275rQ\177=\213CG=\365\334\232=.]>=\203l\216\275\330\266\316\274EN\t>=\364\031\276\367\273\325=\335y\323=\325\265\000\273\220\354\347\275C\221<>\317\222\353\275\222C4>>\320X\275\r2/=C\302\022\276d+\013;\333x\265\275\310\265\301\275}WO\274\325k3\276R \210<&\301 >\361\310\030\276\371\205\220=\r\316\234\274\340\354\013=\360\216\020>/\226C\275\316:\200\2740\252\005\273\3324\035\276T\236.>DP\007>9\370\021>#\207\327=*\212=>\020o\010\276\240\021B>\317\220\321=\031\233\312:\014\223\350=\322\267\336=&:\367=H\022\206><\361\221=\307\355\031>v\331\023\275\321\312\301\275h\350\330\275\255\252/\276dm\326\275\321\014\235\2757-\240=Y\362\203=\030\\\230<?\370\031\275\303\355\273<\240\317\334\275S\306\372\275\223\033\026\276\0372\231\275=\004\315\275|\200\350\275\365\324\221><\005\367=\032Y\377\275\306W#\275\272K\023\275h\330\357\275pu\336\274\305#\006=j\rf\275\251D\266<\335U\310\275\374\216,>)\372\322\275\320\336\013>\033\212o\275\251G\n\276\264\375_=\005\244b>\024qh=\335\3053=G\303\t\276t\r\373=\327\r\200\275\006~4\276\243(\302\273<\025\371=\242\030\275<p\331\346=\222\276\355=k\214\002\276\004o\t>\373\345\001\272\316aH\275~\014\340=\2577\315\274\365\202\362\275B\374\351<\307\375\274\275\t-c\276\230\215\314=\033\004\252\274\243\241\247\275s\222\327=\277q\365\275\340T\335\275\204\361\265\274\000\001\223\275\225D\006>\022_\266\274T/\n\276\373Px\274\\\306\340=/\337\307=\244\026 \276\327\016\356\274O\375,\274\363]\224\275\003\177n\2769\013?>\010\027\261\275\352\326C=k\2466=\233V\225>\321q\252=\331/\334\275\360m\227=3\261\321\2751\324Y\276^r`\276\250\251\255\274\353\317\'\276*l\025<5_\370=\255\360o>\300\202B>x\325\270=v\353\014\275Q\262\213=[\021\245>]]\004>N*\363\2756\271q\275\333\224\006\276sO\025\276\306\310;=\r\234\371\275\223\326\243\275\253\314\'=\377\274\336=\346+D\276\226\304\r<\340\245\220=\241\275\003\276uv\r>\341\003 >\017\024\025>\326t\323\273\303L\264=\220vh<\365\235\"\274\360no\275\230\347\206\2740\375:\276\315\354\025>l\313f=\250\334\r>\200M\203=}\320R<H\023l\272\312(^>l\207\326;\241xD=:q<\276H\205/>]\344w\275\361\'\014\276\204|[\273cm\367\275\356\262\252\275~Xz=\215P\372\274?\347\213\276\236\"\274\275\311\224\004>C\000\250\275i\236~\275J)\033\272\256\316\274\275\262\nz\275\371\262\241\275Mj\336=\226\307i=\262+\r\276*\367\027>\315\230\010\275\367B\004>n\254(>\345\037r\274 {2>T`\341\274\340\014\354=Z/g\276\021\0241=\246\035@\274\224u\200\276k\206\\\274Z\261l\275\371\206.\276\332\232\031\276jz\226=g\003\200=\266N\272<\315N\237=\357}%>\202\366@\273\227L<\276F\315\024\276\321\355\'>\342\027\234\275\nJ\235<\303%Y\275\374\"d=\231\036\232\274\213\263\376\275t\316n=\004J\000\275\263\230\237\276\r\031\320=\247\201\\\276\267\346\244>\310\3406\276\343\215)=\374\200\326\275e\352\357=K\357\353<\002\034/\276\017Kz>y0\317=\032\332\034\275t#\210\275\307\336\241=\340\214v\275\006\265*>\222\345\354=i\213\017\276\342\217|<9\214\'\275,\335\237\275\227\334\302=V^Z>\025v6>\234\214\216=\206\322Y>g`\000>\313\376\006\276\232\242\366\271\310C\200>x\227\300\274&0!\276]<\014\273\001\341\206\276\264\336\204=\232\377T=\214\303n=!t\311<5\310\332\274\264`\302<\315\304\000>\257rw;\352I,>\307\ni=\304\017\350=u\210\352=8\002W>-}_\276\037N\024\276V2m=1\201\331\275\341K\r\276k\345\037\276T\210,\276O7\356<\254E$\275\311y\022\276\245E\211=\246\206\240=\356N\263\275/\302x<\320\3033>\033\322\"\276\232W\\<\257\366A=\217~\265=\230\257\202=\265D(=51\311=\251\\@>XO\257\275\3668\355=&+\274<\220Lh>\245\257\022>1y\356<\321~\236\274$g\257\275\353\003\342\2751\322\246\274F%\341\275G\030i=*\344\353\274r\354\320<\37231\274^\311\201=\313;\363\275gf\204\275\325\371z>X\376\245;\367\302\'>V\326\352\274\035\020\r\2766W\354\274\006\226\252\275\314y\023=6\245i\271\014[\017<~\260\031=\225J\200=\260-\n>\232\364\340\275\030\261\030\275\233H_>c\354\316\274\347=\311\274F\001\007\276:\371\270\274z!\200\275\220T\010>\221\233\373=\017\373\275=u=\350\274\330\266\275\275$R\004=\021Qs<\002\025\010>\344\2357>T\256\263\274\311\r\336\275E\025J\2761v\363<\036\263.\275\240\331\006<\324%\374\274\323\222\304=\205b\t\276\016\306\032\276\323jC\274o\255\251=\376\001\237\275Z\355\332=\356\315\003\276C\255`>|C\316<&\323\341=\016!\005=cs\207;\365\177\377=\204\375\036=\307*+\276~>0\276iQ`\276\204\227\037>\360\221\354\275B\003\233\275\357\371n>\342\231\215=\362\367\355\275\251\003\030<\323\341^\275e\322I>\003v\376=\202\205\326=:\016\213=+g\330\275O\221r\275`\221\034\275H\315\245<%\020-=_\345\236\273?\373\212\275\177\232\035\276\030\204\363<q\352\020>\265P)=BY\243=NJ\347<\277g\004\276\221\234B>X\'\000>.\327#\275_j\\\275{\215U\2753#\243\275d\016\236\275t~\322=\\\325\n\276\341\227\360\275\364\r\020<\230\243\214\275\374\350\257\2756\017\337\275\035\367\342\275\242\2348\273M\302U\275O\370p\275(\003|=5\300?\276s\273.\276\240\213L=\254\260\326\275c?\016\274*\2364=\252kA>W\217\207\276\240/L>\365\017\242\275\n\377\225\275\263\357$=\261\231\'\276\204\205v=Ew\375\274\240\211U=\216\376\321=\034f\237\275N\241\235\275=\344\314=h\037\244=w+\367\275\177G\355\275\000\231S>\331\334\232\275n\224\313<!\033-\276\031g\254=\252\321d\276\033SF=\267\344\376\275\233\325\270\275r\r\037>\036rN>8\"\252=\022xJ>\325\300\227=\307wN>\215\007\314\273_\306K<A\237\215\276\207!R>v]1=c\235\026>\032\037\354=\010\360\020\276\022\357\362=\311Q\323\275\361\004\025\275\3048\312=\263\256\031=\204\322\233\275\272E\247=T\000\254=\314\355\033>\231\035\006;\262\220\277\275E`\303\275O\320t>\343\300x\276\034I+\276?\n\222\275,T\204\276\351\236\226=\221nh\276\222\256\320=\344\202\030>\270\020\201<*X\341\275\201|\003\274\340\235\342=K\262\331=\303\353\206\275\266\365\037>\342#\255\275\202\017\370\275\344%\n\276\016:\016\276\250\214\000;\307\"\304\275\202[z=\\\222\222\275\327\377\021>\240=\336<^(\240=dnI=G!\202\276\264\307\302=yz\022=\010\3738>\302\274R\274\357\240;\276e4\017>\274\220\"\275k\367\022\275+\306\022\276[>a\275\354Fd\274\344\314\032>\2104\227\275\317\024-=\025:\267\275G\313>\275\024$/>5\003\342=\352|\247\274&\201\247\275\t\275d\274u\024\326\275\217\275\037>\324\255\235=\234V\343\275\202\245\321\274\201Z\000>_\200\243=\335@%;L\323g=\227\031\306\274}l\242\275\264\\\247\276CG\362<\315\367\377=\307\240\n\2769V =[\222\317\275z\226\303<M\311M;]\316\315\275\373\3441=\306\3461\276\304\355L\275\341/\277=Q\234\217>,a\\>\304\365\023>\202(\352=\351\350\221=\2005\304=m\372\265=c\032\354=\274\303\243\275\220\0033\276\327\222\030=\205\223\003\276\031w\035=\204\355\254\275\355\001I\274\210\300\010>\346\270j\275_g\342\275\356Ze\273\2048L\275\230\303\033>\236\202,>\3645\327\275=\345\335=wNd>\277\316\374\275\346+\327<\3579\317<\262\036u\276\240+\342\275\250\2420=\311]\200\275<\332\010\276>\347r=\371\213\343\2752\021h=g}\266>\375\035e\276)\014\217\276\317\035\031>o\202&=\3209\374=+\237\031\274t\373\331=\020\217\265\275\214\377\264<Y\222\326=,-\353\275\315z\004>6\262\325\274y\205\366\275\370\357\013=\001\003^>B\377B\275\364\205\320\275\336\312\r=\326\347%\276D\326\016\276hC+\274\245\300\204\275[\355\335\275i9N=\332O\264=o#K\275\307\344\272=\n\'e>\037\210\037=\225\334-\276\031.\r\276\340u8>s\n\241=\260\377\207=e/j=\272\366\321=\177W\347=\226:\300=\"\033\326\275\300\215\340=\014 e\275\325\365\003>W\274\342\275\027\313\361=?\354*>dn\031=\3156m\275\247<\350\275\253@\263\275\374\266*>\261}B;\246^\n;VM\244\274w\334<=\312\027F=\262\312\t\27689\351\275\227P\357=\201\335\207\275\004\266\334=\371E\277\275d\\0>\330B\345\274\2348\002>a\310\242<k\266\302=?\212\356\275\207Z\n\274t\211\203;N(\306\275Z\351\271=\013+\366=\203\366\333\274\220\207\231=8\300\030=R\316\007>\020\000\'>s\300\207\275t\250\016=1i2\274\"yy\276\'\257G\276w \013>z\266;\276q\224\234\274\241\223\276=\247Y\025\276\004\255\\\274\254\261\274=\341\377]=M{\335\275\376\000R\2767\251\025>\226\230\343=K\332\356<&5\241=\256\317\306=Om\347\274$\314\252=5\024,\274\r\370T\276\006\232\263=\230\377\032\275|R\305\275\017\246\023=\214\"\004=`\177\010\276\301\002&>\027\363O\276\223b\271<]>\264\275/\345G\276\305\201\r>\342G\215<\270\033.\276N\255z\275\2148\200=\255\3309\274\022;4>\272\267\361\275\014\344t\275\r\303\302<\243\371\002\276\326\214\006>\232r\364\275\014\273\230>\225=\300=\237\351i\2750@\256=\037\236K>\0050\010\276\\2F=y\311|>f\203\341\2753\016\r>${\345\273\232)\r\275\001Fu=\340\351\010>\027\2060\273+EK=\217\314\032>\217Ez>a\232\036\276\365\007a\276\214\212\305\275^\366\215\276\233\250\201> }\367\275\350\331\314<n%?=M\351\t<\254\224\325\275C\232e>\340\223\211=\240\023\034\275K\000*\276\014\033\253=g9\265\275;R\307=MY7>\016\311\035<C\306\210\2759C\346<;\021\327=\360\267M=\330\274\355\275:|\017\2766\353\210>\206\214\233<\314\303\026\275I\020\r=3\265q\275\364v\266\275\325\222S>\257\036)>\205\255\322\276??\336\272c\336\237\274\007\272\242\276khE;\265\302\001\276Z\234\020\275\315\301\200=\347\202\233\275V\346\313:\336x\006\272\201?\315<X\021\t>\326\214Z\274\035\"==\340\220\005>l\356\376\275\276Q\244\275\372\0347=\231QL<\337\267\371\275$\366\207\275m\330\242<\242\373\014>L\235-\276\013\217\020\276\210\203\265\274\034\225\266>m\355\223=\260MB\2769\353\225=\221\365\241\275\375\236\265\276\017\307\245\275\267\233J\275\001]$=\213p/>\343.\372\275\260\361O\275lj >\240\2505\275\314$0\275\327\254\320=\032!\212=\342\3073\275\350O\t\276\221Ax=}\244\020>\r5\265=\244\202p\275\340\360S=s\350)>\236\202\321=M\361\331=\257>\216;\345\245u\275\372ew<m\337\211=\261\232\324:9\303\035>8\370K>(\355\300\275\335\247\020>CN\r>\333m~>\035A\370=\267\320Q\276\0132\342<\036\314J\276\034\355\347\274\313\347z\274\225\271\303\274D\033\364=K\272\244\276j\231>\276\237\211s\276\005x\n=\262\233O\273\216y\000>x\206{=\">\034>\207\323%>\300\241l\275\264\212F>L\242A>\336#\r\276#\276\347<\']\262=\354\026\303=\275\271\013>)H\314=T\033p\276\261\256\025\276C\374s\275A\251\360<\330\241T=\023\210\221<\200h\035>\337H\335<\3427.\276@Qf\276\337`W\275\005\244\360=\343\310\254\274\271\347\035\276;\267\206>\337R#\276\335<\316\274o\301\'\2769\307\\>)\243\352\275\237w\205\274q\360=\275\017\313\033\276\177(\017>\213\244\215\274Mv\334\275\024\355\226\275\"wx=C\232\342\275\217\003\261\273\244<\213<r8\014\276\240\005H>\236F\340\275M\0137>\255w\251=\006\371\231\274\r\377\342\276\326\354\232=\210\025\002\276nU\221\2769\r}>O\355\300=\323\257T>\374\375\255\274v\364_\275]\333%=C\027E=\354\241\252\275\331d\'>\233\367%=\221\300\367\274m\251\206=}R\364\275\022y\370;\211\216\211\274\025\245\301\275\030\270\'\276;\206\002\276_-?\275\277\206\227;\342\376\217\272\300\206\331=t\325\306<\356z\232=\357:\266<]\321\017=\003\257S\275E\235\364\275I\302\331=IU\336\275\367\345\220\275}\033\364=R\344z\274t\334\340=q\243^\276\023gk\276\310\201\201<\250V&=\032\245\241\275\323\372d\276A@\002>JP.=I\026\330\275\"D\362<0R\211<(\020\022\276\2475\271\275C\204\226<,Tf>C\254\302=\3734\323\274\264S\'\276\321\205\035>\r\212\216=\004\217g\275\220\020\371\274\305\2061\276\014\360\026>\372\030\220\274I\267T>L\276m\276Vt,<d\\r\275/\345B\275\001Ui\274\376\370\250=\006d\013\275B5>=\020\303\201\274\3638\365<\025\271\256\275\370\t\343=\214\364\331\275\254\021O\276\340M/=\357\236\020<\311\376\321\275\276B:>\000~\026\276\212\305\275\275\260\026t\27509\213\275\232W\034=c\241\037\276\273\343\221=pg\210>2\211\256=\363\221.;WZ\245\275\370\245/\275\02613>{\320\226=\307\351\364=/.\007\275U\177\022>\245\010\227>\177Ve\276\237\207\020\2733\020\006=\223\316\223\276p\370c<`A\217<\244@\274\275\307\233m\276\377r\307=\200F\235>p3\330=\243\363o\2735 \021=\252\001\037\276\177L\000\276\212\246\350\274\345Z\216>8\302\326=I\273\023\275\372?\244\275\241\324/>d\236\357\275>S\305=g\274Z\276#\325m\276\177<\202>\331\375\006\276)\257\213=\246\031y\275]\335T\275\361Q\031\276\005\216\017>\324\016e\275Ou:<\235\013\217=\346\260\275;\324\213P=$\252\367=\354y<>\245\256\037\276\014\025\032=\304&\352=.\001\254:(\246\205>\003\276\370\273\250%\202=\021_\331\275pnk<\301\321D=2\275\310:$z\002\275\377]\010\276Y\221D\276[\224&\275\262\203x=p{\341\275z\225A=\006\276\266<C\n\262\275\0252\221\275\272<W=\312\243\235=\014\036\351\275cR\014=Y\324y\275\361O\021\276\253>\330=\275\272\273=\302\306\366\275\237!\362=G\326G=\335\016\352;f\262\275\275i\216\305=\311\201q\275$\014\331\275\220\312\013\275\201\231l\274\317\213.\2769\340\240=v\"5\275\034\360_\275N\227\331;\220\355`\275(6\032\276\226\030\035\276\217\270@;p\360\264=\005\276\270\274\255%I<s\030\n=D\244D=\341\370[\276\364\002\251\273\300\364\232\274\367\020\014\275q\310\031\275\010<x\274T\255\257=\373\300\273=\300I|\275\234J9\276\016\215J<\234\324\246=\351\036$=\314\243\374=\266\336|\275\360\342\326=J/\003=!\242N>{+\226=\223\005\364\274\264\324\267=A\302\224=\"\326d\275v+\200=+\204\010\276\007\340\342=)<\014\276\304\304\260=\210\375\334\275|\371\244\275A;\341\275\326\346M\276\336B\241\275Q-?\276\261Q==;\321+\276\367\317\242<\014g\260\275\217\311\266<[\020\026=|)\023=zh\364<F1I=\220\316/>1\200\002=Te\200\274\377\"~<z\344\244=C\323\035\276\351N\337\274\240\256\013\276VQ\'>D`7\276\200%\366=Ef\035=\350\014\010\276\346\251\'=\344f\020\275\207\025\325\275\337mk>\260\226\216<?4\254=\260\257\356=\355\361\361=\267\n-\275\'\350\270\274\334\354\025>\252\010\274\2753\236\375=\305=J\275t\273d\276\307Q\257\274?k$\276\030\215\313=\033\331\232\275Dj!>#\351\367\274\207E9\275h\264\027\274\206\253\214\276\374\365\000>\261+\003>P\306\005\272k\rI\275\333O\325\273\251\240\360\274+\371\206\275\354\271\313;r\323\323\276\005\247\207=6+\275<\201\334Z=\033Q\023>d\212\225\275\276\240\376\273=\260\204<\\3\263=\222Z\215\275YhV=\254\217*>\272U-\2768\035\r\275U\026{=\207\220!\276`g\317<zw==\206w\366\275-p\262=\277<(>1tX\274t\270\204=\334\335\'\276\036\215\345\275\372V\242\273Il-\275\371\030\335=p\346m>\033\360\251=\373\017\n=\005\352\026\276\025\247q\275`>E\274\255\365\357\274\360H+\276\212`\362<\250\000\200>(\313\365\273\221\352{\274X$\245\2759\343\343=R\265\201\275s\370\036=A\372L=\247\353\224\274\002H\227=\276\n\331\275\037C\006\276\300\025\244=y\375H\275\303`_=\255\3723>\240\261Z\275\304\023\360=\257\004\335\273\342m\000\273\n\202\325=ISJ={v\301\275j\272\t\276\220\313\341=c\367\217=\307x\344\275*K<>\014\255\200>\023\236\311=\267-f\275\367C\035\275\204\331\202>\020\351\020\2751u\354=k\323X;4z\374=\222IZ\275\221\0107>\024Dh;\256B\263\275\364\305\261>b\231\333\276\254\316\274=\177\333\003\275Y\014\301=\3761\270>\336\216<\275\375\233\231\275A\311\210>{O\331\275\224\035<<5F\001>\264<\230\274)(\235\275\316\241\013\276\326\365\277\275V\2770<\301\356\"\2760\350\247\275\234\265\244=\025{8\275q\3329>s\027[\275\305o\001=\006\'\342<\305\216\320\274\243\212\241>\263`;>\3036\003\276\242\332\177=UB\336\273\346\227\315=\242I\337=\323@\222\275x\204\'=,\024\322=\013N\244=e\315\006\276\2649*>\227\025\331\275\347\314$\276p\240\002=\214*\037\276\244\257\334\275?\252\017\274\333\323z>\215G\266=\355\035&\274\002W\177=!\n\257=\212\320==\277\270\370\275\221\240\365\275\272k\035>\211\246\035>W7E=\335t0\272\350\t\005\276\214\223\333=>\316r\275q\341\211\275GD\367\275bS\030\276\226{\210\275<\313\202=\217\363<>0\002\331<W\240\232<\377\213j=\305C\372\2754L\342\275\341\340\006<\022u\007\276\014\212\206>O\322\037\275\013\315\332=\311fa=#n\216\274\303\254\244\275\001\200\033\276\233\353(\276nC\033\276*\217\325\275H`$>\305\303;\276\321c\231=\274\004%=;\216\000\275!\247\330\275\000g\021=\270\237\232\276\026OH\275\027Y\323=,\335\245:\272\032\034\275\375<\326\274\350z\004\276\376\255|\276\000\307q\272P\242L\275\023\230\014\276H\263\230>\236E\335=*\267B\276\004xB>\360\312\362\275N\245\027>\227v\'\275s\002\234;u\\;\276\2365\212\274Fe\013\276\0049\270<\004\240\203=<\264_=\026+\244<\005\345\034\275,\365M\274\217\216\324=\2035!=a\314\024\276!\375\275:Hy\037\276\232\375|>\261\214\331=\362Q\210=1\004V\275_\273\006\276\203(\257\274\354U_\276\234*\\=\210\007@>\3121\025\275R\221\313\275F\356n\274b\013\254\274\031\274B<l4s\275\0021\026>F\300@>\227\331\270\275w\3572>Q0\363\275\346\204\210=^\240\017\276\327\334/\276a\326\222\276$ +>\314\245\022\275\315\006x\276q\266T\276\231\236\326>/;\241=\346\340\302\275\271.\031\276\250\3336\275\032u\375<\343\027\"\276\3051\354<.(\027\276\201L\216\275\345\262\027=\034\340\373=z\372\255=\007\323E=\276]j\27599\001\276\214\364\224<\001\r\023>\257\327\037>\322\365\017>\303DH<&\2055\275\333< >\177\370\'\276\221\275\332\274\316\237[\275\266\247\n=\236\342\276\275]|\205\273\254.p=cT\312=6\254\313;\n5\216=<\310\312;:r\275=\2458\t>Nd\315\275`\317\345=\324\003\312<B\205=\276\343g\223\275fcH\276C\315\251\275\244\022\355\275K\035y=\256\027U\276\333\316>= #\017=|\2765>\006A\364\275M\373\3239j\331\217\275w\351$\275\264\203\367=t\323\262=\204\313\030<\010\024]\275&O\204\275\240`/=3\016\241\274\343\360\007\275\354\371\263=/&\004>\220\201\013>U\361\201\274\2444\255=\200q\354=R\313\336\275\263\352\001>%\r\273\275\276:f<\267]\230<\247n\321\275\224z\025>*2\254=\004_E=m\272I\275\266\266\227>\352u-<\307\363\216\275UF[\276\375\372\265:\324\333&>\032F!=\252\216\233=\221D\245\275\036\317\324=v\333j\274\254\301\355<\302\000T\275\336\030s=\024I,>\n\352\261\275)[\344\275\232\320\014\275*\257\200\275\342\353\251==D\253\273\272H\024>h\265\004\276\340\204\214=\255\273\225\274\027\317\344<\366\256\021>\005\177\017>\256\362\210\275\024\355w\276\260~\023\276\234\355K=Q\272\237<\305\365\223\275\351\216\037>\301\360u>\002\245\n\276F\0003\276\321\177_\275i\033\270\2753\354\003\276\254Bw=\217j\037\275>(\205=\336\216\010\276\3213\377\275\372\231\033\276\021\375\310=\301\202\230=\373\261(\275\344\001\253=D\266%\276\344\232\203\274\003\r\352\275_M\364=\217Vb>\016\225\327\275bMY\275\274\353\306<U\200\027\276C\327\310=\032\233l=4d\332=\371\025\221\275\262\237\021>|\207X\274\371\246\230<-\232\237=\205\3564=\240#\367\275ts\213\274\267\203N=\377\"\003\276\253T~=\242\271\026\275\207\244\013\276\240\332\366\273\2078&\275\027\224\257\274\2475\311\275\005\206v\274\234\003\364=9\351\036\274\036\240\250\273\226\335\307\274pye=\251Dq\274\256r=\276\277\245\231=L\'\232\275A\251\230\275\362\276\262=\332\260\000>\271z\010=\010\325m=\'\264\034\276G\031\334=\265\035\275\275<l\016>Gr$=\216\227\010\275d?=>\366\307\330=\033\300$\276y\355\241=w6\r\275,n\323=J9\343=o\271\217\275\220\006D\275]R%\275VS\234;\204\260a\275\355)\376<\306\254~\275B)\333=r\027U\276Z\376\244<\262p\034>\025\376\230=*k\320=q]%\276\324`\227=\207\245\016\276\337\256f\276L\372R\276\322\376=\275\301\"\004>\360M\013\276\201\372\376<\013xy=8F\324=\034\t >\332\312\334\275\001Dp=\370\336\354\275\037;\246=\257\250\263=\341\0371>\255v\254\274n;\\\275\212\313\271\275TIW>\353&\357=\346\302\t\276y\037\031=a\317\234\275\267\345q\276\016\234\314=\332\216\027>\332\261*\276DT\007>\273\316\251\274\237\r\366\273\3051\177=\231\243\n=^\327\307<\374H\206\276\354\317\033\276w\237+>\037\230\267>\341\353`>\325uG\275C\274U\276\226\277/\2755\376\"\274\334\205\251\275\013Q:>\003+\263\275\373\223|\276\260$\371;U\230\231=N\271\305={\034\247\275\355R\236\276Jl\201>WH\017\274\336\267\334\275\364\342E\275\013\316\232>E\0308\274x\344\210\275}@\271\274\330U\022;0\374\372=4\213\301\274\257\357\026>\325j\211=^>\210<\261\273,=P\210\346=\220v\242\274\004\254\266\274\275e{\276_\300\323;\273\277U\276w+\312\275\035\230\201>\003\226\303\274\345\362\314\275\330\373\242=w$\215=\312Y\000>S?\340=\275\374\215=WU\004>\312%\273\275\267\360\362\274\033\023\236\275+y+\276\227\tv\275\027\361\243=\235e\302=\007\230M= \\\235>\'\255<=`m\303=\004[]\276\032rn\2769X\323\275\250J\004\276\314n\027>\006\200\312\275\207<\351=\2170[\275\336wp;\030\231\334=\315\254\030>t\261\233=\315\031\014\275\376\317F>\250\010K;\261#\270\274\014\206#>\025w2\275}\212\254=\254\356\245=\225\250\267<\017\020\260=\373B\217=\006\265\252\275\260\253w=\3614.\2749\t\032>\274P\266=\271\334\355\275\004\2154\276\364\373\215\275\244\373\223\275\3257e\274\206?\032>6\257\320\275\253@4>\257\326\206>\\\226\315\2755;\025=\'\003\257=\023\024\262=8O\235\274w\211\352\275\264\246\353<\330\255\372\2748}\201\275\211\263\273=u\341\376\275\262\314\364<gGA>\264\0312=\255\'\337=\320\226\'=\215\340\246\274R]e\275\243\247\t\276\320\334/>h\2222\274\022\333\240=\016\330j\275T9\223\275\014;\266<\266\376\333\274\206\000\345\273\376\203\266\274\036\236\365=\357\241\351=n\263e>\3618\230=\240Q\356=\366\205\215>\177\362!\276\361U{\272\271\300\214<\340\016=>?DV=\3758#\276gX\377\274\235\037$=\261\373@<\371\277C<\224\310N=4\220\014\275al\321=\373\004\003\276\211\214\261\275\t[\212=\207\262\334\275W\211\226\275\356K3\276\263\177$=\307K\033>\034\327\020\276I\254\256\275\355x\025>\203\310\265=\273M\263\275\201=\003\276\371\261,\2767\251f\275B3\214\275\366\262\213=\3406\246=\372b\315<Lm\002>\376\030\327=\260\342\206>}\264B=\031\244\347<\013\322+>\010\224\007\275L\201z\275`\021\r=M\301\273=\030\273\034=\003&\032\276\277^\251\275\313\272\340=Nk\230=\201\275:<\357\231\027>]Ex<\316\313\260=\355\177\027>WP\213=.F\'\275W\020\001>q\303\361=\367S\004>\351\322)\275\366/D=R~@\276R\321\346=\230\243\367=*\316B>\031]\346=\220c\037>w\n\251\275\033h\243\275=\375\">S\263\217\275\301\016\221\275\222\307h\272\306\335\022\276\375\304\254=\324B\"\276\225(\276=\035a{<\200M\311=\326\027\006>\001;t>cC \276\342\r\376\274\3515t=\352\306\353\275Q\304\265=\342~>\276\217\303F\275\'\214e=\344Lr=4\350\010\276\216\022(\275^\242\301=\3745\213=\004\020\004=\370\357\021>$S\010>:\230\231>7%\'>q\322\n\275\035<\'\276\351ke>\036\030\373\275\232\376u=3\\\243=\207\327\360=}\211\001\276^\022\311=*\256\276\275RU\253<4\211\215=\256\313@\276\tqd=\346\343\372=\005\330<\275Y\322\351\275-L\201\276\242\311\207\274\223\221w=So\226=\013\272\002>\273\350c\274\223\302\335= l\362\275\230Q\253<\365PA>G\212%=vkN\275\303GV>&H#>\320Q\246\275.\244D\276\205\217\n>6\304\363\274,4\002\276\342h!\275gO\t\276\220\350\'\276$\265t\275J\304\001=\021\340\331=yG\026=\235w\022\2757\226\001\276>GM=\016\225\310=y6\274<\250\351\3709\242k\345=]k\001\276\026e\324\275\303UR=(\211<<\272\365r=$\300\310\275\007\006$\275\201\022\270\275l\263\303=\242\311\353\273*\202\341\275:\224\223\275\353e\016>y\212\377\274`}\261=4\246/\275\213\312\275\275\004wO=yCt\2757\222\321=\017\330\343=*\021\247=\234:\375\275\304\227\350\275k\355~;\301\331\306=\261\303\327<\261#Z>\257\r\256\273+\001\276=\274\351\223=]o\317\275\252U\000\275n\354\222<{\243O>\350\225@\275\232\307\363;\242\2644=\025\335\370\275\342\367:=\367\347n\276\317\2622>\314\010\021\276\362[\003\276X\022\010\272[\023\206<\260\"\251\275\r\271\225=\341\226;>\351\025\333=\303\300\240<\010&\333\275\351+\350=:\373\'>&\014\256\274>\350\030\275b:i\275>j\313\275\356MF\275\0055\025\274\266!\363\274`\265b:\3026.\276>L$=rs\354=\007b\\\274t\366\335\275\033\232\304=R\0059\276\000\274;\276*\330a>\370\316\t>\272A\227>i\235\224>\260\206\221<\035\305\343\275\235\251N<X\004$<\036!\023=\357\344\001\276\351G\273\275\231\037\207=S\017\244=\372Z\225\275Ph\'=\\}A;\016s\251\275\251\306\321\275\302H\010\276\007\341\255\274>\335\004;\224\376\303=\240\267\354=~k5>\327B\027>\246\257n\276\341\013j\275D\213\206\275\314x\265<\035\033J\275(m\227\276\005@\221<\342\355\004\276`{\221\275SM[>\n|\034>\024\303\353\275CCA\275\230n\363=\360\210\237\274\331\311\233=G\2742\275\203*T\276j&\\>\223\336\200=\256I4\275\345&\260\275\r\245\311\274\207.\314>7\353\355\274Q\227\221\275\207\264\017\276\364wh>1#\006\276\'\341\377\275\306\014m\276:\3714>6\247\355=\320\027\334\275\326\224<>\257z\025\275;>\213=\r2P>KB\201\275?D\304\275j\034\271<\264\326\261\275C\204\323\274\234\373\266=\221\024D>\315\315\266\275\375\221X\276\263\010\324<\351\345\257=\367\030b>\025\267\355\275xy\263\275\r\262\222=\346\240\242<\n\235\306;\304\271#>\213\232\247\275\007\267\246=\024\327\202=AhF>w\\\377\274\221\212\004\276^\204\246\275\316t\227\272U\270t>!\tv<\000\266\365\275~\214*\2763\201\014>\275\314i<\355?(>\247\310H<k~\351<lb\027>\371\310\225\274\244\343\356\275\265\275\242\275\233\264\001<>p^\274\354\340\213=\324\226\021\275!\210\213=\305D\030>)\266\202\275\260\360R\274\367\214\273=\205\335\265\274m/\257\274)\001\014\276\246\230\215\275\354\346\037\276\347\312b\275\367f\333\275\010\321\007\276\264UI=8\303\367\275W\242\347=\222\317\265\275\210\030\372=\023b\330=\346G\332\275\277\336\r\275\317*\210\275&lh>\213\223\373\275\306V\266\273\274\337\310>\"\300\004>\016\277\006\274\353\364\224>\256F\027\275\325mG=.\004a\275\007\021\316\2752\337\320>\003*;>x|\311\274\237\367\202=L\220:\274\2067\262\273\005\360\373<\223\0357=>\355-=\374k\357<||#\275\315+e\272\311\316c>\324q;>\255\310p\276\227~\013\276\275gG<K\027!>\017:\023>\356\341_\274\035\272\373\275I\236\017>{\006F\274\252\205T>\363%\327=h\351Y=\020\257\310<N\371;\275:\206\251\275\3655\007\2756\320o=uv\031>\217\2305\276\303\345\237\275\373\310`>\265\222\201\274\345y)>\302\310\253<\021\371\251\275\240\302\007>\324o\315\275k/\304;\036K\244\274V0\214=\035\266\315\275yF\205\275\272\005\r\275\"\343\013=\345\225\211\276\241g\307\274\377h\320\274Kh~;\370I\033\276R\021k>\2316\257\275\225\317\333=\315\370\210<K\251\303\275\0206\007>\225*L\276\331\336k\2763\261\276=w\352_>\207\217\331;\3064\347\275\232\203\214\273q\000H>\246x\257=\002\255\032;\323\266[>\021\257\277=\r(\262=T\222\201\275\033\334@>\345\215\005>\002q\227\275\230s\210\275 #\031\275N\237\366\275]>Y\274(\033,\273]\304\317=\027\345]>\362\310\020>c\216\262<\221\352\250\275\220N\023\275~\220\326=\260\363!\276\014:\026>\267x\004>W\353\035\276>\337a\275\375\325&\275|\025\323\275\272nx\274\357\231\253=\230\305\255=\212\n2\276\003}\327\275\271\016\302\275K\005y=\316\030\034\276~\343\357\275\266\305\333<\257v\375\274\235^\217\276(|\034\276,\254\220\275WEF=\315=\373<\025]\314\275\325\375\255\275\357\002\331=\205\252\317<\217M==\363\365\377;\206z]>R\037\241\275\237>V>O.A>\000\306\203<\234?\017>?\352\006\276\036@\003\276\223\367:=\267\351N>\006\371\356\275\375\356\211\275\320\212\022>Nm\024=pE\252\274a\365o=\277\273\r\275\237W\021\276\262\237==\025\376,\276?\371\313=\355\240\335<YN\272\275\254\365U>\t\215\246=\217Ds<\205\223X<\370D\253\274aRV\276\211\"&>\177T\334=]w\022>\370\2208\276\204\273\262=\317~#>\2771\361\275H\370\342=\037\013\210=vB\030>8~\306\275)\232\003\276\0108I\276\333\227g\274\177r\306<\375\247\376\275^@\021\275)\335\032\276|\205T\276\260J\024>8\314\321=\027\267\020\276W\237+\275\271~\254>Pt\210<\3461#\276\323\177_\276c\351\030=)\234S>w0\313\274\304\313\002>9!\216=[\220\021\274\321\207\250=\"Y8>\302:\005>\250\357\247\274\364\377\267;z\211\356=m\303\222\275*\250\353<\373NK=\312Ok<b\344\024\275SO\373=\363\342\202\2758\030\016\276\245\r\314\275#\310R\276\222\275!\276\352\200|<\223\311\326=\360\317\323\275,\306\033>e\333U=\017\213f\276<\276\362:y\340\315\275\\\227\211>\324\235\336\275\324e\030\275QA\243=\233\204A\275\234\005\277<\364C*\273\361\212\300\275_\000\013>\207\n\020\275\234)\345\275\276M\231>Po\022\276*T\314\275]t\337=\373\341I>ki\206\2750\353\215\275\221\322\022\276\017\353\006\276\213\0013\275\rz\022\275\214\033R\275D\220\017\276\031\206u=t\020\332=]\3230\276~!\242\274\'(!<\030\262E\276\267^%\276\366\355\227=\333\0051>.EP>\272\023\026>\351\254\236\2759\250\275;(7r\275\r\016#>\204Tm=\353\353\336\275\324\036+>\\g*=\314\201\013>\3153|\275\004\366\350=l!z>\203\311\016=\246Ff\2759K\344=^\274\200>\301~\031\275\205\270\211>T\034\201=\210\214\014\276\225=\007><\000\216<b\023\365\275\247\300\n\274JU\361\275\304\016\022\276\242qw\274w\314>\275/\307\314=\304]C\273!\350!<@}\305\275h\334I\274\376\006\030\276\203\314\003\275\006\326$>2H8>\246>\232=\324si={K\025\276\324\333\274=\336\037c<.\202\242\275\250\020\350<spR>T\323\000=\250`H\275\231\370.=\325h\305\275\230\007\312\275\332\n\251\274\0002\033\276\006NZ\275\347\262\346=hZ%>\226(n\275E\'\376=\277c\365<5\247\004\276Ay\242\274?\256~\275\212\260\226=~2)=X\274\276\2746y5>\3657\210\275\372a\256<\226\200\264=~\267&=\033\351\275\275\000\273\r>\232\264\365\275\267\243M\276J0m>@\2371\273\300\327\334=&i\002\276e\r\022\2760~\236=\333V3>\206\350\375\275m\252P\276\343\371\357=\252\273.\2762\216S\275\022\024 >~\232r=\264N\232=\301\316k\275\030\222\202<8\332W\276*\034\007>}\276\001<\323\366\276=\033*\303\275\311d\034\276?k\007\274\"l\221<\264\020\007\276\346\246\356=\261E\324=\274Z0\274{m\266=^\004<\275\206m\027>\355\244n\276\346\276\354\275\363\350\177=\277\342Y\276\255(\006>\272\0308=\347\300\r\275\341\353{<}\007K\275\017j\204>\\\025\317\275\375K\354\275\317G\231={^\266=\241\034\336\273\330\217\320\275D\250\t=\007\354\235\273\231t\255<\337\324\003=\332>\234\275\225q5=\351\233B>,\3511\276{\224L\274\254U\303=\307\n\304\272c-\271;\302\206(\276w\214\232=^IU<\r\3526\274\332\220\021=>{O\275!\271$>E\'\033\275\226\316\035\276@]@=\333\362C\276\031@S:\352\016->{\237\377\275pEd\274\2036\273=5\010\024>+l\321\275p\210\007\275\334D\234\274\350u\333=\235\311\210=\242Yj\275\224\342\205\275\321\\\036\275@\351W\275v\240\351=\006[\224\275W\304\267=\201\335\216\275\214\016\200>\336\214b>i\370\026\276^\344\300\275\273\204\220\2757\356\207\275t\0018\275\'y\321\275\247\250\217\274M\242z\276\266\366\325\274\214\363\233\275eMO>\3604+\275\304\3247\276s\262\333=\255U9\275\'\2434\276\343\243\364<\035;\326\274\261\025\313;p\277\213\275c\261\000=\260Z*>\314]\366=\246S\371\275\206\355\255\275\034<\'\276\333\227x>\253\005\314\274Z\217\347\275jUv\275B\373\270<\002\311\207=\010z\016\275\216k2<\000\221\312<\271\r]>\"\022\332=\314[\373=\243\254\377=q\232\005>\247\013\023\276\026&y\274-\\\310=\033\366\234\275\351!\300\275\314\201\343\274Crq\275\004\"\035\276v\211\330=\334{\275=\325\335\021==\215\017\276%\207W=\005\204i<\223j\035\276\002\312W=u\3337\276%\2364\275\035\224\t>\354\313:\275\334\231\024\276\254\252\357\2754\006\222<\014Y\221<\247\204\257\275\341P\375=\315\005\366=\2011F>V\207\246\275\310\355\262\274ok\311=\367\264\022>\023\273\005>\230\377\036=\337\311\252\275)\233\261\275B\357\026\275\354\026\301\275\340\270\030\275\001\206\341=LU\017\2765,\304=\022\014\370\274Ps%\275\'b\212=-q\021<\017\004\220=t\034\326=\367\236\207\275\254\300\246=6\3024=\001\",=V=\260\275\306\230\035=\336\022#\275?:\r>\343\215\035\273\245R\021>\270*\242\274\000\007\330=\326*\371=\331\243\030\276\3679\313=\336\353E=<^\331\274\273\231\">\307\2111>r\310\267\2751\335\226\274\014\205\272=O\263\031\276\313\277\352\275\274@\237=f\2039<\255>\330<\353\324\307=\260c\334\275\245e\004\275\277\377*\275\230T5\276S\271\000>\367R\315=\020o\033>\271\232\341\275:)e=\234Ai=\3707\007>a\222\216<U\n#=/\3046\274\032k)\276\370F\237=\240`X>\220\365\231\274i$\303<\257\342\233>\265O\223\274s\260\222\276V\302\203\276X\263\316\2751\341\026>N\240$\275\"\374w=\341\352\257=\353C\225;\337L\017\274\260\tu<s\275\316\2750\305\005>\240\233\240\275\260H\312\273z\244!\276~\3174\275\357}\004>\342\353\271<\227\346\334\275M\360\315<\275\207v>\271e\250\274/\222\211=z/]\275V\r\320\274\350\031}=\t\331\314=Vu\200>\300{@<\276Q\361<\257\020P>M\344\032\276\200\277\331<\365QA<p\211\326\275\314i\317=\210O\036=\202(Y\275\375\303+\276\263]L>\3441\316\275y\010u\275\"Si=\222zw\275\243\030\212\276ne\332\274\237\215:\276<\326H\275\202\257\020\274\316\320\263\275\235~+>M\r\016\276\220\245\316=|\t\016=\366\201u>\0314+>k\271\375\275\336[;=\334\317w\275h\262\321=h=\271=d:h=\255\307\'\276\200U\023\276\355Tg=\t-&>\2548\207\275\r\033U>\242\024\371<O\221\231\274\331\266&\276Jmw>\021\022\357=\313\341\252=\230W\331<f~\023\275_\237U\273}\013\271=/\345>=(/\335=\321\356,>\361I\261=(\271\345=\347\376n\275r\252\002\276\377l\035\275\004\262\220\275\3305\224\274\034~!>\200H%\275\372T\217>\222M\230=H\341\230=\'#\312=\303y?\275\332\007\341=\350\337\t>\271\364,\276\302b\342=\272\275\220=)3\246=\030+\323\274\216\r2\275g\364\336<\210\330f=\003\020\241\275\220\203\315<\245-\352<J&\206\275^I\013>\367\177\252=jz\230=\0170\224\275\350\314\n>\177B\005\276\226\350\227=`!\332=\366\224\343=<)\343=KQ\332\275\351B\r\276\ny\314<\371\177C\276\330\034\273=\026\2561\275\342\212&>\214\263\305\275i\235L\276L\367N\276\237\330\025>\215\220s\276\260\017S\276B\341\020>I\237M\275\237y\016\276\322E\352=M\302\017\273U\242\320;\275| \276\033M\233=D\222\312=\241\246?>9$1=g\305Q>\277\215i>\023\031\227;\356z&<\354P\241==\335*=\313Y:=\226\223I>:\241O=\010\227\307=\244\225\202=,- \276\001\215\216\274Z\360\274\275x\265\364\2747\035\227=9\000\250<\231Q\301\275\273}\217\275\"\346+>0\207\264\275\\=\277\275\236:\017>f\006B=\251[\227=\367\215\036>\243\377\271\275o\243\254\273\300\30129\236\252b<\226S\201>\266S\245=\2071\002>>=<<\031\035\213\273\021\267\t>\004\"\365=CD\317\275S~\374=\007\341\304:\010b\025\275\344\354B>\242\206\344=\275y*\274_\177\325\275\3709\343<\362#\310\275\326\234\010>\216\2146\275\232\302\250\275&\247\263\275\250j\000\275\237\013\235<\213\252\274\275\222\213O<\376\223\'\276\344\tc=\272@D:\314\024:=H\336\024=\376X(<\221w\030<=\2226>\202\204\036\276\277\233\027>\033\353\312\275A`?>v\333:=\270\341u\275i\231X\275\257l\006\276\340k_>\010+\010\276\275\332\247=]uE\275\030\304\263\275\270\010\"> \242\261=#\335\366<\220DS\275]Lh\275[\362r=M4\207=\221\252\327\274\376\250\325=O\217b=\331\241\322\275\n_f=\205\332n><4\021\276\233\360C\275\177\002\020\276\322\3527<\350\256:\275\032\000\023>x)\n\276*\271\355\274L\270Z=\215\326\345=\213\204h==\030\024\275\017s\340\275\307\217\211=J\3520\275ar\000>p3\">O*\374\275\030D\203>5V\267=\254.\001\276\246\354>\274h\340\273>\212Gn>\3559 \276\323\204\346\275\010\212\007\275\356\013e\274\264$\216=\350P\025>\3332\215=\236#\355\275\300[Q=k&\321=\206qg=L-U=\024\016\234<\265\030>>\3637\"=\3112\204\275r\377#;D\302\236=\215\263\003\276\002ZW\275\313\260\240=\273\340\331=y\225,\275\215<x=x\371>>{\266\362\2756=\014=\376n}\275\205D\r\276\010w\t\276\212\033\215>\372B?=\032\026-\276\230\3170\276\346\014l\274;1<>Q\265\003\276 ?E>\036u\374\274x\343F\275E`A>\257\354\233=H\277\023\276\202\013\362<\"\216-\276\201\314\030=7\371\020\276\273\3652>\214e\257=\237\240\372=I\211\r\276\213\262\360=\220-y>z\321\'>(\255o<\340P\002>0u\n\276*s\355={\235\233\275?X\207=\264g\236=\020\227\355=\373\267\016\276:@\270\275\217\000\344\274Jr\363=*4c\275\213\354\020=\233x\320\274\n3\371\275_9\r\276\200\337\252\274\364 E>\017\025\340\275#\275\270\275\264\022\225=-@\206\275O\340\205=d`\3609\267{\201\276\2323\001\276\254R\036\276~\3713=\366S\242=.\374\236=\367\201\002\275\271\262\022\276$\363\235=\231\032\306=\272*\337\275~\236\353=\235Q\265\275\316\326\223\275r$F>\na\004\276B\023\217<\r\235 >\367Y\347\275\363\274\261\275\334\201\355<lE\215\274\260\303\214=\354\020\004\276\2474@>\226|\326\275}.\266\274\2622}\275Q\000/\276\213\207\013> \330\234<e\240\213\2754\235\217\274p\311Z>sA\307<:w\334\275t\243\355\271\221E\235=fp\010\276\2740@>\224B\326=[N\003>%\372\316=\'\311\304=\322\336\202>.E\277\275\007f\\\274\027`$\275\025]\014\276tM\223=eN\221\275d\374_\2769$\007\276\240nw>\016\032\345\275\3377Z=@\001[>\ne\270=^\236\346\273\200\331\222=\227\t\361=\206\256S\276G\362\331\275;\n\016\276~\226\267<\231\261\270>r\206\303=k\200&\276\207\350\323\274\016\301\331=\243\t\005=\202*\250=\355\240P\275\321\213\210=\364\302\t\276\005=M\276\220S6\276:\365\240=\213f0\276\227\3768\274#\314\\\275\347.I\274\347\306\315=,\343j=\205\3538\276\020$\001>\265\3249=.\323\023>\271\213J>iJc>m\225\021=\205C\320:o\021\251=\262\300\332;@\021\312<\304D\030\276\335-\032\276\275\327E\274\256\324\027\276.5l>H\315\274\274\004\007\250\274\225\242g>g\242\232=\207\305\374=7\274\254=\240\331\313\275{(\230\274\203\316\366=6\224\323\275\356\006B\274\324\263\310\275\243\255\262\275\r\r\016=\021Ye=\375\240\265\274\025\346\353\275\020\352\325=\036H\226\271\225!\270\275\326\236\350=\363e\013>\376@\215\275%\237\033\276\2240\020\276\353\265\327=G\211\370\2747\340\247\274Z}6\275\331\245\337=G\266\355=\336\315\030>_X\273\2737\260m\275\375\353\254\275\177\034\335\275\006?t\274\377\021\215\275\326\027\020>\3706\006>\226\321\372=\372C\021>\rM\020=\305\376\314\275\325{V>+\2440\276\327\013\221\275\301\254\016\276\021d\222=\361I\257\2752\275\252\274~8\312=\342M8>\373\342\233\275}}\340\275\343\212\207:!:\254\274\032\376\032\276\344\256\352\275\243\221\036\276!\320#>QJ\021>\251D\r=\3235\227=\3015\036\275\345E\230\275\255\016b=\315\332w\276\353\020\354\275\333&\252=\213\337\313<s\254\251=K\034/\276\3600\275=\025\313\337\275\261cM>\215*\240>\213\207v\275V\030\307=`q\255\275,o\230\276\363\244G<\365?s=\276\224\027<(\234)\276H\277~\276\332)\205=\252#\351\275\\}\233=Q\037\360=\177\256\270=wq\342\275J\275\013>\236E\241=\033\267I>\302\334\024\276\027\005J;\237\237I\275[n*\275\264\3137\275\302U >\304z}=\235nJ\275`\357L>\033b\272\274N\027\362\275\253\316\234\275\320F\324<\201\321\321=\032\220\345=\277\025\223\276\303u\314=\246O_>\340\376\340=\\\254\022>\237\332\252=\013\253~:2k\001>.Y\032\276\235Y\037=\341s\237\275l\230\233\274\260\003\342\274\321\203\013\276+\017\213\275\312\311\331=\010q\\=\321f\005\276xy\177>\366Ye>\353\257\017>\313\310\207<\362\303 >\217`%\276\222\003\354=\323\374\200\275\336D6>(2\">\232>\031\276n\343\367=\276R\223\276<\253\267=\346\354\024\276\260\344\324\275kt\250<\2005\373=\303?\257<\257\204\264=\357\334N>U\005\t>\224\023,\276\203\024N\275\224\255u\275`\016\007:S\312\340\275o\334\000=\013s\253\275Y A=&\345\234=\334\007\376<\260\t\r\276X)\354\275@\031\236\275\211r\201=\271\317\306=\310\257\005>\223s\370\275k\236F>\021i\036>pm\177<\001<\254\275\202\375\036\275\372\353o=\032X\205\275\361\350\014\276\3655r\276\315\332X=\\V\031>\\(Q\276v\023\235\275\034\361U=?b\004\276\025[\214\275d@\200=\272\242\244=Fd1>r\335\006=\234\260\263\275(\005\r>\233\035\214>\240\016\005>.sO=\253,\203\273\362B\210<\311\300\232<-<1>\335\177Y>\207\302^>nEA\275\001~r>s\233\367=\254\001\255=S\302q>\224\016\317\274*Wi=\266=\034>g\374\253;\373\215\275\274\"P/=\342iF>RZ\010<\311 \230\275\371US=\256R8=\257z\000\276\225\270\251=*5\216<T\020\214=\230x^\276\036\213\262=\367]`\275,\352&>[\\S\275\036r\214\275\023\3515>?\036u>\233.m\274\37541\275\357\376M\275\373$5>\337\325\322=a>\245\275\234\300M\276,\370\275=\226\274\006>\2541\312\275v\023\003\2765y<>\304\353\243=\231D#>\232g\221\276\230\373\342=\341k\253<\264\302\327\273@W\272=\222x\245<\302\236l<\360\272\272\275\006\242\t\276<\333\010>V\220\001>\337C\027\276/\236\016\275\305O\034\276\0166\206\275\257\026[>c\001\"\276\206^\032>\312Z\017\275\241X\027>\2769F>Bk^>\331<\030>\271\335\273=\352\t5=\260\013;\274f\267s=\350\'\202=\272\315Q=k\220\210\272\266p\203\276r\375\330=\355\301\345\275Jm\000\274\371\3146>\371\321\272\275\225\306\t>\224\255H\276ZQz\273lR\271<4S\030\276\256\232\277=\205\220\030>p\354\245=\034t\320\275mP\337<+\245\307\275\247\374q=\022\"\"\276\332\324\326\275\321S)\276\237\2564\276\013\253-\276\035\333\027>8\333\020=\237?\342=\237\300\217=\341\021\363\275p\312_<\343M\023\276$5#>\315\245\013>\356\021\240\275\306\031\214=7so\275\340\362\010>\rk\n\275\340\241\361\274\261p\031>Q\315\030\276\354^u<\340M\347=/\023\211\275\007C\201\274\014\312\343=\253\357\216\275\303\3771>\220\013p>\344\t\355=SI;=\241\237\216<B<\007=\307B\345=]\253\356\273\310\330\373=\234\031\206;}j\001<\344p\023\276\371qA<\201\361\037\276\013\370\353\275\355\201i\275\240W\210\276\271m\036>\315\346==\005\221\023=\300\204\031\275)\332y>\245\017\202<\303b\034\276\037{7>\326\264;=\305\033\302\275\217\207\244=\201\035\375\275a\250^> (\222=>s\000>\"U:=\376\n\023>\321\032\345\275\236[\037\276\361\250\341<\003\255\363=f\243\200<\325@\265;\210\324\317=\240\010a=+\360\002\276\375\"\345>\244\347\215;\200Q+\275\2572H\276%\324\202>\224\272\264\275\310|\232>\372\330\"\276\300\342\244=\034\177\212\275@I\323=X~\302>\352\316\003\276#\277\213;\321qO>b\306|\272\376\276\265\275\002\206\013>\025\335\277=*\005\006<c\334\305\275C\213\375\275z\005V=8<\232\276\362\366\265\275t\214H>"
      }
    }
  }
}
node {
  name: "dense32/kernel/read"
  op: "Identity"
  input: "dense32/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense32/kernel"
      }
    }
  }
}
node {
  name: "dense32/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "\341\243\361\274\324\315\260<L$\353\274W\211A=\3574\013=\004\313\016\274\036\242\313=\350\322\013=\000\000\000\000L\263^\274]Sz<\217G\307<$\272\002\275f\003\225\274\317\321k\273\232\365\017=v\371\325<V\252\253<\031;D\274\007\211\320<P\200\"\273q\245\373\274;\3567\274\370\024\031\274{\221!=H^3=\217\321\357\274\230\331\260<E\005\n<j(\201=+\345l\275\376\3448\275"
      }
    }
  }
}
node {
  name: "dense32/bias/read"
  op: "Identity"
  input: "dense32/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense32/bias"
      }
    }
  }
}
node {
  name: "dense32/MatMul"
  op: "MatMul"
  input: "flatten/Reshape"
  input: "dense32/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense32/BiasAdd"
  op: "BiasAdd"
  input: "dense32/MatMul"
  input: "dense32/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense32/Relu"
  op: "Relu"
  input: "dense32/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense10/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
        tensor_content: "K\201M\275\346\225\327\276\024\216B>\223\311$=X^j\277\237 \257\275U\276\370>U\307\317>\310\331\362=\361Y$\277(\317%>\023\311\211>\001\313|\276\267Z\264\275\310\021\352\275\212\213S>\026\351\264\276\371\3323\2764\205\263>\307Mn>\266C\271\275\307\225\242\276\034\334q\273e\206\232>I8\004\277\010wI\276\235~(=9\204\030\277\227)\367\274\330\377[>o\374\347\276a\'\217>H)~>\244\225\224;\346\324\234\276\017X\002>\327\227\310\276\275*d>\'\023\347\275-\236h\275*\334\371=+\214\205\275a\332l\275\220\203\322\276Kp \276\224\220\370\276\230\342_\276\312\323$\277]\377=\276\275j\207>\346@*>\307\231\216>[t\200>\263\200\313=\363i*\276\311\213C\276\221\006\306>\023j\200>\276;.\276\324\210\204\276#Z\n=\247L.?\\T\312\275_U\004\277\351\3717>qK\001\277*}\002\276\265\'<>G\355\311\276/\\2>\235r]>\264+\252>Nw\310>u\230\325\276\363\035\203\275\0257\361\275\306\320\367>\252\301c>{O\352>\030\242[\276\005\302\230>\370\3405=\310^\246\275v\263\242\276\310/\312\275X\376j=\274L\330=\214W\216\275\310\323\211=\344\355\275\276\222\306v>\332Jb\274mx\265\275n\265\260>BlA<\025\371\340\276\242\217\206\2753(\335<\256\366\\\276j-\366\276\305\370\216\274\251\235\006>\2205\227\276\227\025\017\277\312)\217>\245\255;\277\322=\327=ukZ\275!\230\220\276\226\341\320\275\202._=-\332\314\276.\222\346\275\276h3\276\216\217/\275#\3615\276\262[\204\276;\221\260>3H\246\276\247\375\026>$\264\317\276\275r\201\276\227g\233>\3253\224=Ar\222>\233\345\242=\372\267@>\004\016\377\276\343^\251\275\0253\207=4\326x>\207\332\222\276\372\316\206=.\325\355;\322Y\013=\312\205\214>\327JN\276\21029\274\304g\211>\254\3122\276\323#\325\276p\370\251\276\320x\330\276$$F>\337\352\026\276\025\317\224\276\005_\262\274n\374\232=\251\256\026>\202B\213>\312}\203=W\"O>#\230\277>e\230D\276\312n\244\275\357\033\373\276\253U\314=_Cu>\354P@\274\367\223%\277\241,w>+\315\376=\211\303\220>d\351\016>`\007\246>\223s\250>\'\367\234=\341\365\347\276.p;\276\271\266\203\274\001\333\362=\000\214\227=\205I\272\276\204\270\271\276\005\202\352>yQ(>D\246\272\276\251\222\244\274Q\374L>\257\270\253>\252P\316=\222B\275\276\2740\216\276\346\370\330\275$\366\227\275d\242F>\010\211\240=\227H\212\276/U\027>d\025\036>\247\246\362\275\251\213\212>\305^\022>\357\246t=\014\031\235\276r\363\266=z\252\263>\010\305\013\277\231\316\217>\260p<\275\346\353\007\277y\177\036>\024\321!>\005\350\023=\"\363\356>\216\274\263==w\254\2760\201\355=]\340\365=^@y\276=\335h=\321dY\276\247\264\243\276\367h\331=\243\216\026\276UX\\>\022!\034\276d\347\325\275\211\323\255\276\311\214\261< \341\365<\254\215\030\2737\n\222\276:\224\263\276\355q\022\276\017\302@\276\256\220p>\354$ \276\n\361\207\275q>\005>\302p\324\275\010\336w>\377.\017\276\214d\261\276HZ\026\275\202\022\270>H\373\211>\263\256\021>OY\235\2768/\216>v\371p\276\274\345\255>\n@%>T\025\313>\304\237\232\276p\355\000?\332w\344\276\307J\241=\030\204 \276\240@X<|(7\276\357\212\334\276E\243\002\277\247?\313<\332\n\231>\r\250p>\250\225\276>\222:\317<\200\225\271\276\371\250\262\276D\233\231>r\355\024>\353m\016\275\234\204j\276\244\227\243\276\235x\211\276\005\250|\275M\322\010>\245P\276\276\224\325\212\275\210T\217>t!\014\277\321\366\277\275\371\376\314\276zM\227\276,\343\342\273\031\"\216=\3354;>\3276\300=\017DS>\330\0224>\371G\201\276\342H\375>\320X\001\277\344pQ>\277j\377\276\327%\215\276\341\314\031\275\343\002\342\276\337/.>\375\215R\276+%\235>\204D\327\276\336\207:\275\335\233\252\276oK\272>\202\223n>\3514\314\2750\260\004\277\350\316\221\276v\212\200>&e\325\276\356\356\224\276\371\333\343>\363)\200>\3114\352\276\255\343\375\276\227>\202\275MFe>\323\247&\276Z<\240\276Y\024\204\276Cr\217>_?\220>\330\373\004\276\341\010\370\276D\225\250\276\024\215\347\274\341\016\206\276\3157\032="
      }
    }
  }
}
node {
  name: "dense10/kernel/read"
  op: "Identity"
  input: "dense10/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense10/kernel"
      }
    }
  }
}
node {
  name: "dense10/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "m\363!<\273\250h=\317\360w\275B\333\315\274\232(0<\212\034><\260\235\264;Je5=.H\372\274d\303\344<"
      }
    }
  }
}
node {
  name: "dense10/bias/read"
  op: "Identity"
  input: "dense10/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense10/bias"
      }
    }
  }
}
node {
  name: "dense10/MatMul"
  op: "MatMul"
  input: "dense32/Relu"
  input: "dense10/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense10/BiasAdd"
  op: "BiasAdd"
  input: "dense10/MatMul"
  input: "dense10/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "predictions"
  op: "Identity"
  input: "dense10/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10502100735902786
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10502100735902786
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "conv2d_transpose/kernel"
  input: "conv2d_transpose/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/kernel/read"
  op: "Identity"
  input: "conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "conv2d_transpose/bias"
  input: "conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/bias/read"
  op: "Identity"
  input: "conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose/Shape"
  op: "Shape"
  input: "poool2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose/Shape"
  input: "conv2d_transpose/strided_slice/stack"
  input: "conv2d_transpose/strided_slice/stack_1"
  input: "conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose/Shape"
  input: "conv2d_transpose/strided_slice_1/stack"
  input: "conv2d_transpose/strided_slice_1/stack_1"
  input: "conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose/Shape"
  input: "conv2d_transpose/strided_slice_2/stack"
  input: "conv2d_transpose/strided_slice_2/stack_1"
  input: "conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/mul"
  op: "Mul"
  input: "conv2d_transpose/strided_slice_1"
  input: "conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/add"
  op: "Add"
  input: "conv2d_transpose/mul"
  input: "conv2d_transpose/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/mul_1"
  op: "Mul"
  input: "conv2d_transpose/strided_slice_2"
  input: "conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose/add_1"
  op: "Add"
  input: "conv2d_transpose/mul_1"
  input: "conv2d_transpose/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "conv2d_transpose/stack"
  op: "Pack"
  input: "conv2d_transpose/strided_slice"
  input: "conv2d_transpose/add"
  input: "conv2d_transpose/add_1"
  input: "conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose/conv2d_transpose_2"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose/stack"
  input: "conv2d_transpose/kernel/read"
  input: "poool2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose/conv2d_transpose_2"
  input: "conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_transpose/Relu"
  op: "Relu"
  input: "conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0765465572476387
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0765465572476387
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Assign"
  op: "Assign"
  input: "conv2d_transpose_1/kernel"
  input: "conv2d_transpose_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/read"
  op: "Identity"
  input: "conv2d_transpose_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Assign"
  op: "Assign"
  input: "conv2d_transpose_1/bias"
  input: "conv2d_transpose_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/read"
  op: "Identity"
  input: "conv2d_transpose_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/Shape"
  op: "Shape"
  input: "conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_2/Shape"
  input: "conv2d_transpose_2/strided_slice/stack"
  input: "conv2d_transpose_2/strided_slice/stack_1"
  input: "conv2d_transpose_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_2/Shape"
  input: "conv2d_transpose_2/strided_slice_1/stack"
  input: "conv2d_transpose_2/strided_slice_1/stack_1"
  input: "conv2d_transpose_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_2/Shape"
  input: "conv2d_transpose_2/strided_slice_2/stack"
  input: "conv2d_transpose_2/strided_slice_2/stack_1"
  input: "conv2d_transpose_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_2/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/mul"
  op: "Mul"
  input: "conv2d_transpose_2/strided_slice_1"
  input: "conv2d_transpose_2/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/add"
  op: "Add"
  input: "conv2d_transpose_2/mul"
  input: "conv2d_transpose_2/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/mul_1"
  op: "Mul"
  input: "conv2d_transpose_2/strided_slice_2"
  input: "conv2d_transpose_2/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/add_1"
  op: "Add"
  input: "conv2d_transpose_2/mul_1"
  input: "conv2d_transpose_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_2/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/stack"
  op: "Pack"
  input: "conv2d_transpose_2/strided_slice"
  input: "conv2d_transpose_2/add"
  input: "conv2d_transpose_2/add_1"
  input: "conv2d_transpose_2/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_2/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_2/stack"
  input: "conv2d_transpose_1/kernel/read"
  input: "conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_2/conv2d_transpose"
  input: "conv2d_transpose_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_transpose_2/Relu"
  op: "Relu"
  input: "conv2d_transpose_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0883883461356163
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0883883461356163
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Assign"
  op: "Assign"
  input: "conv2d_transpose_2/kernel"
  input: "conv2d_transpose_2/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/read"
  op: "Identity"
  input: "conv2d_transpose_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Assign"
  op: "Assign"
  input: "conv2d_transpose_2/bias"
  input: "conv2d_transpose_2/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/read"
  op: "Identity"
  input: "conv2d_transpose_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/Shape"
  op: "Shape"
  input: "conv2d_transpose_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_3/Shape"
  input: "conv2d_transpose_3/strided_slice/stack"
  input: "conv2d_transpose_3/strided_slice/stack_1"
  input: "conv2d_transpose_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_3/Shape"
  input: "conv2d_transpose_3/strided_slice_1/stack"
  input: "conv2d_transpose_3/strided_slice_1/stack_1"
  input: "conv2d_transpose_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_3/Shape"
  input: "conv2d_transpose_3/strided_slice_2/stack"
  input: "conv2d_transpose_3/strided_slice_2/stack_1"
  input: "conv2d_transpose_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_3/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/mul"
  op: "Mul"
  input: "conv2d_transpose_3/strided_slice_1"
  input: "conv2d_transpose_3/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/add"
  op: "Add"
  input: "conv2d_transpose_3/mul"
  input: "conv2d_transpose_3/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/mul_1"
  op: "Mul"
  input: "conv2d_transpose_3/strided_slice_2"
  input: "conv2d_transpose_3/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/add_1"
  op: "Add"
  input: "conv2d_transpose_3/mul_1"
  input: "conv2d_transpose_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_3/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/stack"
  op: "Pack"
  input: "conv2d_transpose_3/strided_slice"
  input: "conv2d_transpose_3/add"
  input: "conv2d_transpose_3/add_1"
  input: "conv2d_transpose_3/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_3/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_3/stack"
  input: "conv2d_transpose_2/kernel/read"
  input: "conv2d_transpose_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_3/conv2d_transpose"
  input: "conv2d_transpose_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_transpose_3/Relu"
  op: "Relu"
  input: "conv2d_transpose_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/max"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/mul"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Assign"
  op: "Assign"
  input: "conv2d_transpose_3/kernel"
  input: "conv2d_transpose_3/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/read"
  op: "Identity"
  input: "conv2d_transpose_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Assign"
  op: "Assign"
  input: "conv2d_transpose_3/bias"
  input: "conv2d_transpose_3/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/read"
  op: "Identity"
  input: "conv2d_transpose_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/Shape"
  op: "Shape"
  input: "conv2d_transpose_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice"
  op: "StridedSlice"
  input: "conv2d_transpose_4/Shape"
  input: "conv2d_transpose_4/strided_slice/stack"
  input: "conv2d_transpose_4/strided_slice/stack_1"
  input: "conv2d_transpose_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_1"
  op: "StridedSlice"
  input: "conv2d_transpose_4/Shape"
  input: "conv2d_transpose_4/strided_slice_1/stack"
  input: "conv2d_transpose_4/strided_slice_1/stack_1"
  input: "conv2d_transpose_4/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/strided_slice_2"
  op: "StridedSlice"
  input: "conv2d_transpose_4/Shape"
  input: "conv2d_transpose_4/strided_slice_2/stack"
  input: "conv2d_transpose_4/strided_slice_2/stack_1"
  input: "conv2d_transpose_4/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "conv2d_transpose_4/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/mul"
  op: "Mul"
  input: "conv2d_transpose_4/strided_slice_1"
  input: "conv2d_transpose_4/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/add"
  op: "Add"
  input: "conv2d_transpose_4/mul"
  input: "conv2d_transpose_4/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/mul_1"
  op: "Mul"
  input: "conv2d_transpose_4/strided_slice_2"
  input: "conv2d_transpose_4/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/add_1"
  op: "Add"
  input: "conv2d_transpose_4/mul_1"
  input: "conv2d_transpose_4/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv2d_transpose_4/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "conv2d_transpose_4/stack"
  op: "Pack"
  input: "conv2d_transpose_4/strided_slice"
  input: "conv2d_transpose_4/add"
  input: "conv2d_transpose_4/add_1"
  input: "conv2d_transpose_4/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d_transpose_4/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "conv2d_transpose_4/stack"
  input: "conv2d_transpose_3/kernel/read"
  input: "conv2d_transpose_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_4/BiasAdd"
  op: "BiasAdd"
  input: "conv2d_transpose_4/conv2d_transpose"
  input: "conv2d_transpose_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d_transpose_4/Relu"
  op: "Relu"
  input: "conv2d_transpose_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.37796446681022644
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.37796446681022644
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d/kernel/Initializer/random_uniform/max"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d/kernel/Initializer/random_uniform/mul"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Assign"
  op: "Assign"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/read"
  op: "Identity"
  input: "conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/bias/Assign"
  op: "Assign"
  input: "conv2d/bias"
  input: "conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/bias/read"
  op: "Identity"
  input: "conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "conv2d_transpose_4/Relu"
  input: "conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/BiasAdd"
  op: "BiasAdd"
  input: "conv2d/Conv2D"
  input: "conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d/Relu"
  op: "Relu"
  input: "conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub"
  op: "Sub"
  input: "Rank"
  input: "Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice/begin"
  op: "Pack"
  input: "Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "Shape_1"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "concat/values_0"
  input: "Slice"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "conv2d/Relu"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Softmax"
  op: "Softmax"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "Softmax"
  input: "Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "predictions_softmax"
  op: "Identity"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "Greater"
  op: "Greater"
  input: "predictions_softmax"
  input: "Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "predictions_softmax"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "one_hot/on_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "one_hot"
  op: "OneHot"
  input: "ArgMax"
  input: "one_hot/depth"
  input: "one_hot/on_value"
  input: "one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "one_hot"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LogicalAnd"
  op: "LogicalAnd"
  input: "Cast"
  input: "Greater"
}
node {
  name: "logits/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\n\000\000\000"
      }
    }
  }
}
node {
  name: "logits"
  op: "Reshape"
  input: "conv2d/Relu"
  input: "logits/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "segmentation_labels"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
        dim {
          size: 84
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\n\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "segmentation_labels"
  input: "Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "Reshape_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Shape_3"
  op: "Shape"
  input: "logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub_1"
  op: "Sub"
  input: "Rank_2"
  input: "Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice_1/begin"
  op: "Pack"
  input: "Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Slice_1"
  op: "Slice"
  input: "Shape_3"
  input: "Slice_1/begin"
  input: "Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "concat_1/values_0"
  input: "Slice_1"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_3"
  op: "Reshape"
  input: "logits"
  input: "concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Rank_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Shape_4"
  op: "Shape"
  input: "Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub_2"
  op: "Sub"
  input: "Rank_3"
  input: "Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice_2/begin"
  op: "Pack"
  input: "Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Slice_2"
  op: "Slice"
  input: "Shape_4"
  input: "Slice_2/begin"
  input: "Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "concat_2/values_0"
  input: "Slice_2"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_4"
  op: "Reshape"
  input: "Cast_1"
  input: "concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "SoftmaxCrossEntropyWithLogits"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "Reshape_3"
  input: "Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sub_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub_3"
  op: "Sub"
  input: "Rank_1"
  input: "Sub_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Slice_3/size"
  op: "Pack"
  input: "Sub_3"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_3"
  op: "Slice"
  input: "Shape_2"
  input: "Slice_3/begin"
  input: "Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_5"
  op: "Reshape"
  input: "SoftmaxCrossEntropyWithLogits"
  input: "Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Reshape_5"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Reshape_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Shape"
  input: "Reshape_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mean_grad/Shape_1"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Reshape_5_grad/Shape"
  op: "Shape"
  input: "SoftmaxCrossEntropyWithLogits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/Mean_grad/truediv"
  input: "gradients/Reshape_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "SoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/Reshape_5_grad/Reshape"
  input: "gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/SoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "SoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Reshape_3_grad/Shape"
  op: "Shape"
  input: "logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/SoftmaxCrossEntropyWithLogits_grad/mul"
  input: "gradients/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logits_grad/Shape"
  op: "Shape"
  input: "conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/logits_grad/Reshape"
  op: "Reshape"
  input: "gradients/Reshape_3_grad/Reshape"
  input: "gradients/logits_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/logits_grad/Reshape"
  input: "conv2d/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d/Relu_grad/ReluGrad"
  input: "^gradients/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d/Relu_grad/ReluGrad"
  input: "^gradients/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv2d_transpose_4/Relu"
  input: "conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/conv2d/Conv2D_grad/ShapeN"
  input: "conv2d/kernel/read"
  input: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv2d_transpose_4/Relu"
  input: "gradients/conv2d/Conv2D_grad/ShapeN:1"
  input: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "conv2d_transpose_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_transpose_4/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose_4/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose_4/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv2d_transpose_4/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose_4/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose_4/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_4/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose_4/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_transpose_4/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_4/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/conv2d_transpose_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/conv2d_transpose_4/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv2d_transpose_4/conv2d_transpose_grad/Shape"
  input: "conv2d_transpose_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/conv2d_transpose_4/BiasAdd_grad/tuple/control_dependency"
  input: "conv2d_transpose_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2D"
}
node {
  name: "gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2D"
  input: "^gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_4/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "conv2d_transpose_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_transpose_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose_3/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose_3/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv2d_transpose_3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose_3/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_3/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose_3/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_transpose_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/conv2d_transpose_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/conv2d_transpose_3/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv2d_transpose_3/conv2d_transpose_grad/Shape"
  input: "conv2d_transpose_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/conv2d_transpose_3/BiasAdd_grad/tuple/control_dependency"
  input: "conv2d_transpose_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2D"
}
node {
  name: "gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2D"
  input: "^gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_3/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "conv2d_transpose_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_transpose_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose_2/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose_2/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv2d_transpose_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose_2/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_2/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_transpose_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/conv2d_transpose_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/conv2d_transpose_2/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv2d_transpose_2/conv2d_transpose_grad/Shape"
  input: "conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/conv2d_transpose_2/BiasAdd_grad/tuple/control_dependency"
  input: "conv2d_transpose_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2D"
}
node {
  name: "gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2D"
  input: "^gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose_2/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "conv2d_transpose/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/conv2d_transpose/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "gradients/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose/Relu_grad/ReluGrad"
  input: "^gradients/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose/conv2d_transpose_2_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\200\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/conv2d_transpose/conv2d_transpose_2_grad/Shape"
  input: "poool2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/conv2d_transpose/conv2d_transpose_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2D"
}
node {
  name: "gradients/conv2d_transpose/conv2d_transpose_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2DBackpropFilter"
  input: "^gradients/conv2d_transpose/conv2d_transpose_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/conv2d_transpose/conv2d_transpose_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2D"
  input: "^gradients/conv2d_transpose/conv2d_transpose_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/conv2d_transpose/conv2d_transpose_2_grad/Conv2D"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 128
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose/kernel/Adam"
  input: "conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 128
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose/kernel/Adam_1"
  input: "conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose/bias/Adam"
  input: "conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose/bias/Adam_1"
  input: "conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose_1/kernel/Adam"
  input: "conv2d_transpose_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_transpose_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose_1/kernel/Adam_1"
  input: "conv2d_transpose_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose_1/bias/Adam"
  input: "conv2d_transpose_1/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam/read"
  op: "Identity"
  input: "conv2d_transpose_1/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose_1/bias/Adam_1"
  input: "conv2d_transpose_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_1/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose_1/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose_2/kernel/Adam"
  input: "conv2d_transpose_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_transpose_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose_2/kernel/Adam_1"
  input: "conv2d_transpose_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose_2/bias/Adam"
  input: "conv2d_transpose_2/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam/read"
  op: "Identity"
  input: "conv2d_transpose_2/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose_2/bias/Adam_1"
  input: "conv2d_transpose_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_2/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose_2/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose_3/kernel/Adam"
  input: "conv2d_transpose_3/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam/read"
  op: "Identity"
  input: "conv2d_transpose_3/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose_3/kernel/Adam_1"
  input: "conv2d_transpose_3/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose_3/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d_transpose_3/bias/Adam"
  input: "conv2d_transpose_3/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam/read"
  op: "Identity"
  input: "conv2d_transpose_3/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d_transpose_3/bias/Adam_1"
  input: "conv2d_transpose_3/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d_transpose_3/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d_transpose_3/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "conv2d/kernel/Adam"
  input: "conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/Adam/read"
  op: "Identity"
  input: "conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "conv2d/kernel/Adam_1"
  input: "conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "conv2d/bias/Adam"
  input: "conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/bias/Adam/read"
  op: "Identity"
  input: "conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "conv2d/bias/Adam_1"
  input: "conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose/kernel"
  input: "conv2d_transpose/kernel/Adam"
  input: "conv2d_transpose/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose/conv2d_transpose_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose/bias"
  input: "conv2d_transpose/bias/Adam"
  input: "conv2d_transpose/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose_1/kernel"
  input: "conv2d_transpose_1/kernel/Adam"
  input: "conv2d_transpose_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose_2/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose_1/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose_1/bias"
  input: "conv2d_transpose_1/bias/Adam"
  input: "conv2d_transpose_1/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose_2/kernel"
  input: "conv2d_transpose_2/kernel/Adam"
  input: "conv2d_transpose_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose_3/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose_2/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose_2/bias"
  input: "conv2d_transpose_2/bias/Adam"
  input: "conv2d_transpose_2/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose_3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose_3/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose_3/kernel"
  input: "conv2d_transpose_3/kernel/Adam"
  input: "conv2d_transpose_3/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose_4/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d_transpose_3/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d_transpose_3/bias"
  input: "conv2d_transpose_3/bias/Adam"
  input: "conv2d_transpose_3/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d_transpose_4/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d_transpose_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Adam"
  input: "conv2d/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2d/bias"
  input: "conv2d/bias/Adam"
  input: "conv2d/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_conv2d_transpose/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_1/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_1/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_2/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_2/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_3/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_3/bias/ApplyAdam"
  input: "^Adam/update_conv2d/kernel/ApplyAdam"
  input: "^Adam/update_conv2d/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_conv2d_transpose/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_1/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_1/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_2/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_2/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_3/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_3/bias/ApplyAdam"
  input: "^Adam/update_conv2d/kernel/ApplyAdam"
  input: "^Adam/update_conv2d/bias/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/update_conv2d_transpose/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_1/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_1/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_2/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_2/bias/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_3/kernel/ApplyAdam"
  input: "^Adam/update_conv2d_transpose_3/bias/ApplyAdam"
  input: "^Adam/update_conv2d/kernel/ApplyAdam"
  input: "^Adam/update_conv2d/bias/ApplyAdam"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv2d_transpose/kernel/Assign"
  input: "^conv2d_transpose/bias/Assign"
  input: "^conv2d_transpose_1/kernel/Assign"
  input: "^conv2d_transpose_1/bias/Assign"
  input: "^conv2d_transpose_2/kernel/Assign"
  input: "^conv2d_transpose_2/bias/Assign"
  input: "^conv2d_transpose_3/kernel/Assign"
  input: "^conv2d_transpose_3/bias/Assign"
  input: "^conv2d/kernel/Assign"
  input: "^conv2d/bias/Assign"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^conv2d_transpose/kernel/Adam/Assign"
  input: "^conv2d_transpose/kernel/Adam_1/Assign"
  input: "^conv2d_transpose/bias/Adam/Assign"
  input: "^conv2d_transpose/bias/Adam_1/Assign"
  input: "^conv2d_transpose_1/kernel/Adam/Assign"
  input: "^conv2d_transpose_1/kernel/Adam_1/Assign"
  input: "^conv2d_transpose_1/bias/Adam/Assign"
  input: "^conv2d_transpose_1/bias/Adam_1/Assign"
  input: "^conv2d_transpose_2/kernel/Adam/Assign"
  input: "^conv2d_transpose_2/kernel/Adam_1/Assign"
  input: "^conv2d_transpose_2/bias/Adam/Assign"
  input: "^conv2d_transpose_2/bias/Adam_1/Assign"
  input: "^conv2d_transpose_3/kernel/Adam/Assign"
  input: "^conv2d_transpose_3/kernel/Adam_1/Assign"
  input: "^conv2d_transpose_3/bias/Adam/Assign"
  input: "^conv2d_transpose_3/bias/Adam_1/Assign"
  input: "^conv2d/kernel/Adam/Assign"
  input: "^conv2d/kernel/Adam_1/Assign"
  input: "^conv2d/bias/Adam/Assign"
  input: "^conv2d/bias/Adam_1/Assign"
}
versions {
}
